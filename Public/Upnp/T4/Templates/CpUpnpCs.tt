<#@ include file="UpnpServiceXml.tt" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Linn.Xml.UpnpServiceXml" #>
<#@ template language="C#" #>
<#
    string domain = TemplateArgument("domain");
    string type = TemplateArgument("type");

    uint version = 1;

    try
    {
	   version = Convert.ToUInt32(TemplateArgument("version"));
	}
	catch (FormatException)
	{
        throw (new ArgumentException("Invalid version number specified"));
	}
    catch (OverflowException)
    {
        throw (new ArgumentException("Invalid version number specified"));
    }

    string upnpdomain = domain.Replace(".", "-");

    if (upnpdomain.StartsWith("upnp-"))
    {
        upnpdomain = "schemas-" + upnpdomain;
    }

    string fileName = "";
    char[] charSeparators = new char[] {'.'};
    string[] res = domain.Split(charSeparators, StringSplitOptions.None);
    foreach (string str in res)
    {
        fileName += str.Substring(0, 1).ToUpper();
        if (str.Length > 1)
        {
            fileName += str.Substring(1, str.Length-1);
        }
    }
    fileName += type;
    fileName += version;
    string className = "CpProxy" + fileName;
    string dllName = "Cp" + fileName;

    Initialise();

	Document u = new Document(TemplateArgument("xml"));
#>
using System;
using System.Runtime.InteropServices;
using System.Text;
using Zapp;

namespace Zapp
{
    public class <#=className#> : CpProxy, IDisposable
    {
        [DllImport("<#=dllName#>")]
        static extern uint <#=className#>Create(uint aDeviceHandle);
        [DllImport("<#=dllName#>")]
        static extern void <#=className#>Destroy(uint aHandle);
<#  foreach (Method a in u.methods) #>
<#  { #>
        [DllImport("<#=dllName#>")]
        static extern unsafe void <#=className#>Sync<#=a.name#>(uint aHandle<#=ArgsCFull(a)#>);
        [DllImport("<#=dllName#>")]
        static extern unsafe void <#=className#>Begin<#=a.name#>(uint aHandle, <#=InArgsCFull(a, true)#>CallbackActionComplete aCallback, IntPtr aPtr);
        [DllImport("<#=dllName#>")]
        static extern unsafe int <#=className#>End<#=a.name#>(uint aHandle, uint aAsync<#=OutArgsCFull(a, true)#>);
<#  } #>
<#  foreach (Variable s in u.evented) #>
<#  { #>
        [DllImport("<#=dllName#>")]
        static extern void <#=className#>SetProperty<#=s.name#>Changed(uint aHandle, Callback aCallback, IntPtr aPtr);
<#  } #>
<#  foreach (Variable s in u.evented) #>
<#  { #>
        [DllImport("<#=dllName#>")]
<#      if (s.type == "bin.base64") #>
<#      { #>
        static extern unsafe void <#=className#>Property<#=s.name#>(uint aHandle, <#=outargctype[s.type]#> a<#=s.name#>, uint* aLen);
<#      } #>
<#      else #>
<#      { #>
        static extern unsafe void <#=className#>Property<#=s.name#>(uint aHandle, <#=outargctype[s.type]#> a<#=s.name#>);
<#      } #>
<#  } #>
        [DllImport("ZappUpnp")]
        static extern unsafe void ZappFree(void* aPtr);

        private GCHandle iGch;
<#  foreach (Variable s in u.evented) #>
<#  { #>
        private CallbackPropertyChanged i<#=s.name#>Changed;
<#  } #>
<#  foreach (Variable s in u.evented) #>
<#  { #>
        private Callback iCallback<#=s.name#>Changed;
<#  } #>

        public <#=className#>(CpDevice aDevice)
        {
            iHandle = <#=className#>Create(aDevice.Handle());
            iGch = GCHandle.Alloc(this);
        }
<#  foreach (Method a in u.methods) #>
<#  { #>

        public unsafe void Sync<#=a.name#>(<#=ArgsFull(a)#>)
        {
<#      foreach (Argument i in a.inargs) #>
<#      { #>
<#          if (i.variable.type == "boolean") #>
<#          { #>
			uint <#=ArgNameLocal(i.name)#> = (a<#=i.name#>? 1u : 0u);
<#          } #>
<#          else if (i.variable.type == "string" || i.variable.type == "bin.base64" || i.variable.type == "uri") #>
<#          { #>
			char* <#=ArgNameLocal(i.name)#> = (char*)Marshal.StringToHGlobalAnsi(a<#=i.name#>);
<#              if (i.variable.type == "bin.base64") #>
<#              { #>
			uint <#=ArgNameLocal(i.name)#>Len = (uint)a<#=i.name#>.Length;
<#              } #>
<#          } #>
<#      } #>
<#      foreach (Argument o in a.outargs) #>
<#      { #>
<#          if (o.variable.type == "boolean") #>
<#          { #>
			uint <#=ArgNameLocal(o.name)#>;
<#          } #>
<#          else if (o.variable.type == "string" || o.variable.type == "bin.base64" || o.variable.type == "uri") #>
<#          { #>
			char* <#=ArgNameLocal(o.name)#>;
<#              if (o.variable.type == "bin.base64") #>
<#              { #>
			uint <#=ArgNameLocal(o.name)#>Len;
<#              } #>
<#          } #>
<#      } #>
<#      foreach (Argument o in a.outargs) #>
<#      { #>
<#          if (o.variable.type != "string" && o.variable.type != "bin.base64" && o.variable.type != "uri" && o.variable.type != "boolean") #>
<#          { #>
			fixed (<#=outargctype[o.variable.type]#> <#=ArgNameLocal(o.name)#> = &a<#=o.name#>)
<#          } #>
<#      } #>
			{
				<#=className#>Sync<#=a.name#>(iHandle<#=ArgsNames(a)#>);
			}
<#      foreach (Argument i in a.inargs) #>
<#      { #>
<#          if (i.variable.type == "string" || i.variable.type == "bin.base64" || i.variable.type == "uri") #>
<#          { #>
			Marshal.FreeHGlobal((IntPtr)<#=ArgNameLocal(i.name)#>);
<#          } #>
<#      } #>
<#      foreach (Argument o in a.outargs) #>
<#      { #>
<#          if (o.variable.type == "boolean") #>
<#          { #>
			a<#=o.name#> = (<#=ArgNameLocal(o.name)#> != 0);
<#          } #>
<#          else if (o.variable.type == "string" || o.variable.type == "uri") #>
<#          { #>
            a<#=o.name#> = Marshal.PtrToStringAnsi((IntPtr)<#=ArgNameLocal(o.name)#>);
            ZappFree(<#=ArgNameLocal(o.name)#>);
<#          } #>
<#          else if (o.variable.type == "bin.base64") #>
<#          { #>
            a<#=o.name#> = Marshal.PtrToStringAnsi((IntPtr)<#=ArgNameLocal(o.name)#>, (int)<#=ArgNameLocal(o.name)#>Len);
            ZappFree(<#=ArgNameLocal(o.name)#>);
<#          } #>
<#      } #>
        }

        public unsafe void Begin<#=a.name#>(<#=InArgsFull(a, true)#>CallbackAsyncComplete aCallback)
        {
<#      foreach (Argument i in a.inargs) #>
<#      { #>
<#          if (i.variable.type == "boolean") #>
<#          { #>
			uint <#=ArgNameLocal(i.name)#> = (a<#=i.name#>? 1u : 0u);
<#          } #>
<#          else if (i.variable.type == "string" || i.variable.type == "bin.base64" || i.variable.type == "uri") #>
<#          { #>
			char* <#=ArgNameLocal(i.name)#> = (char*)Marshal.StringToHGlobalAnsi(a<#=i.name#>);
<#              if (i.variable.type == "bin.base64") #>
<#              { #>
			uint <#=ArgNameLocal(i.name)#>Len = (uint)a<#=i.name#>.Length;
<#              } #>
<#          } #>
<#      } #>
            GCHandle gch = GCHandle.Alloc(aCallback);
            IntPtr ptr = GCHandle.ToIntPtr(gch);
            <#=className#>Begin<#=a.name#>(iHandle, <#=InArgsNames(a, true)#>iActionComplete, ptr);
<#      foreach (Argument i in a.inargs) #>
<#      { #>
<#          if (i.variable.type == "string" || i.variable.type == "bin.base64" || i.variable.type == "uri") #>
<#          { #>
			Marshal.FreeHGlobal((IntPtr)<#=ArgNameLocal(i.name)#>);
<#          } #>
<#      } #>
        }

        public unsafe void End<#=a.name#>(uint aAsyncHandle<#=OutArgsFull(a, true)#>)
        {
<#      foreach (Argument o in a.outargs) #>
<#      { #>
<#          if (o.variable.type == "boolean") #>
<#          { #>
			uint <#=ArgNameLocal(o.name)#>;
<#          } #>
<#          else if (o.variable.type == "string" || o.variable.type == "bin.base64" || o.variable.type == "uri") #>
<#          { #>
			char* <#=ArgNameLocal(o.name)#>;
<#              if (o.variable.type == "bin.base64") #>
<#              { #>
			uint <#=ArgNameLocal(o.name)#>Len;
<#              } #>
<#          } #>
<#      } #>
<#      foreach (Argument o in a.outargs) #>
<#      { #>
<#          if (o.variable.type != "string" && o.variable.type != "bin.base64" && o.variable.type != "uri" && o.variable.type != "boolean") #>
<#          { #>
			fixed (<#=outargctype[o.variable.type]#> <#=ArgNameLocal(o.name)#> = &a<#=o.name#>)
<#          } #>
<#      } #>
			{
				if (0 != <#=className#>End<#=a.name#>(iHandle, aAsyncHandle<#=OutArgsNames(a, true)#>))
				{
					throw(new ProxyError());
				}
			}
<#      foreach (Argument o in a.outargs) #>
<#      { #>
<#          if (o.variable.type == "boolean") #>
<#          { #>
			a<#=o.name#> = (<#=ArgNameLocal(o.name)#> != 0);
<#          } #>
<#          else if (o.variable.type == "string" || o.variable.type == "uri") #>
<#          { #>
            a<#=o.name#> = Marshal.PtrToStringAnsi((IntPtr)<#=ArgNameLocal(o.name)#>);
            ZappFree(<#=ArgNameLocal(o.name)#>);
<#          } #>
<#          else if (o.variable.type == "bin.base64") #>
<#          { #>
            a<#=o.name#> = Marshal.PtrToStringAnsi((IntPtr)<#=ArgNameLocal(o.name)#>, (int)<#=ArgNameLocal(o.name)#>Len);
            ZappFree(<#=ArgNameLocal(o.name)#>);
<#          } #>
<#      } #>
        }
<#  } #>
<#  foreach (Variable s in u.evented) #>
<#  { #>

        public void SetProperty<#=s.name#>Changed(CallbackPropertyChanged a<#=s.name#>Changed)
        {
            i<#=s.name#>Changed = a<#=s.name#>Changed;
            iCallback<#=s.name#>Changed = new Callback(Property<#=s.name#>Changed);
            IntPtr ptr = GCHandle.ToIntPtr(iGch);
            <#=className#>SetProperty<#=s.name#>Changed(iHandle, iCallback<#=s.name#>Changed, ptr);
        }

        private void Property<#=s.name#>Changed(IntPtr aPtr)
        {
            GCHandle gch = GCHandle.FromIntPtr(aPtr);
            <#=className#> self = (<#=className#>)gch.Target;
            self.i<#=s.name#>Changed();
        }
<#  } #>

<#  foreach (Variable s in u.evented) #>
<#  { #>
        public unsafe void Property<#=s.name#>(out <#=argtype[s.type]#> a<#=s.name#>)
        {
<#      if (s.type == "boolean") #>
<#      { #>
			uint <#=ArgNameLocal(s.name)#>;
	        <#=className#>Property<#=s.name#>(iHandle, &<#=ArgNameLocal(s.name)#>);
			a<#=s.name#> = (<#=ArgNameLocal(s.name)#> != 0);
<#      } #>
<#      else if (s.type == "string" || s.type == "uri") #>
<#      { #>
			char* ptr;
            <#=className#>Property<#=s.name#>(iHandle, &ptr);
            a<#=s.name#> = Marshal.PtrToStringAnsi((IntPtr)ptr);
            ZappFree(ptr);
<#      } #>
<#      else if (s.type == "bin.base64") #>
<#      { #>
			char* ptr;
			uint len;
	        <#=className#>Property<#=s.name#>(iHandle, &ptr, &len);
            a<#=s.name#> = Marshal.PtrToStringAnsi((IntPtr)ptr, (int)len);
            ZappFree(ptr);
<#      } #>
<#      else #>
<#      { #>
			fixed (<#=outargctype[s.type]#> <#=ArgNameLocal(s.name)#> = &a<#=s.name#>)
			{
	            <#=className#>Property<#=s.name#>(iHandle, <#=ArgNameLocal(s.name)#>);
			}
<#      } #>
        }

<#  } #>
        public void Dispose()
        {
            DoDispose(true);
        }

        ~<#=className#>()
        {
            DoDispose(false);
        }

        private void DoDispose(bool aDisposing)
        {
            uint handle;
            lock (this)
            {
                if (iHandle == 0)
                {
                    return;
                }
                handle = iHandle;
                iHandle = 0;
            }
            <#=className#>Destroy(handle);
            iGch.Free();
            if (aDisposing)
            {
                GC.SuppressFinalize(this);
            }
            else
            {
                DisposeProxy();
            }
        }
    }
}

<#+
Dictionary<string,string> argtype = new Dictionary<string,string>();
Dictionary<string,string> inargctype = new Dictionary<string,string>();
Dictionary<string,string> outargctype = new Dictionary<string,string>();

void Initialise()
{
    argtype.Add("ui1", "uint");
    argtype.Add("ui2", "uint");
    argtype.Add("ui4", "uint");
    argtype.Add("boolean", "bool");
    argtype.Add("i1", "int");
    argtype.Add("i2", "int");
    argtype.Add("i4", "int");
    argtype.Add("string", "string");
    argtype.Add("bin.base64", "string");
    argtype.Add("uri", "string");

    inargctype.Add("ui1", "uint");
    inargctype.Add("ui2", "uint");
    inargctype.Add("ui4", "uint");
    inargctype.Add("boolean", "uint");
    inargctype.Add("i1", "int");
    inargctype.Add("i2", "int");
    inargctype.Add("i4", "int");
    inargctype.Add("string", "char*");
    inargctype.Add("bin.base64", "char*");
    inargctype.Add("uri", "char*");

    outargctype.Add("ui1", "uint*");
    outargctype.Add("ui2", "uint*");
    outargctype.Add("ui4", "uint*");
    outargctype.Add("boolean", "uint*");
    outargctype.Add("i1", "int*");
    outargctype.Add("i2", "int*");
    outargctype.Add("i4", "int*");
    outargctype.Add("string", "char**");
    outargctype.Add("bin.base64", "char**");
    outargctype.Add("uri", "char**");
}

string InArgsCFull(Method a, bool aTrailingComma)
{
    string result = "";
    
    foreach (Argument i in a.inargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        
        result += inargctype[i.variable.type];
        result += " ";
        result += "a" + i.name;
		if (i.variable.type == "bin.base64")
		{
			result += ", uint a" + i.name + "Len";
		}
    }
	if (aTrailingComma && result.Length > 0)
	{
		result += ", ";
	}
    
    return result;
}

string OutArgsCFull(Method a, bool aLeadingComma)
{
    string result = "";
    
    foreach (Argument o in a.outargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        
        result += outargctype[o.variable.type];
        result += " ";
        result += "a" + o.name;
		if (o.variable.type == "bin.base64")
		{
			result += ", uint* a" + o.name + "Len";
		}
    }
	if (aLeadingComma && result.Length > 0)
	{
		result = ", " + result;
	}
    
    return result;
}

string ArgsCFull(Method a)
{
	string result = InArgsCFull(a, false);
	string outArgs = OutArgsCFull(a, false);
	if (outArgs.Length > 0)
	{
		if (result.Length > 0)
		{
			result += ", ";
		}
		result += outArgs;
	}
	if (result.Length > 0)
	{
		result = ", " + result;
	}
	return result;
}

string InArgsFull(Method a, bool aTrailingComma)
{
    string result = "";
    
    foreach (Argument i in a.inargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        
        result += argtype[i.variable.type];
        result += " ";
        result += "a" + i.name;
    }
	if (aTrailingComma && result.Length > 0)
	{
		result += ", ";
	}
    
    return result;
} 

string OutArgsFull(Method a, bool aLeadingComma)
{
    string result = "";
    
    foreach (Argument o in a.outargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        
        result += "out ";
        result += argtype[o.variable.type];
        result += " ";
        result += "a" + o.name;
    }
	if (aLeadingComma && result.Length > 0)
	{
		result = ", " + result;
	}
    
    return result;
}

string ArgsFull(Method a)
{
	string result = InArgsFull(a, false);
	string outArgs = OutArgsFull(a, false);
	if (outArgs.Length > 0)
	{
		if (result.Length > 0)
		{
			result += ", ";
		}
		result += outArgs;
	}
	return result;
}

string ArgNameLocal(string aName)
{
	string name = aName.Substring(0, 1).ToLower();
	if (aName.Length > 1)
	{
		name += aName.Substring(1, aName.Length-1);
	}
	return name;
}

string InArgsNames(Method a, bool aTrailingComma)
{
    string result = "";
    foreach (Argument i in a.inargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
		if (i.variable.type == "boolean" || i.variable.type == "string" || i.variable.type == "bin.base64" || i.variable.type == "uri")
		{
			result += ArgNameLocal(i.name);
			if (i.variable.type == "bin.base64")
			{
				result += ", " + ArgNameLocal(i.name) + "Len";
			}
		}
		else
		{
	        result += "a" + i.name;
		}
    }
	if (aTrailingComma && result.Length > 0)
	{
		result += ", ";
	}
	return result;
}

string OutArgsNames(Method a, bool aLeadingComma)
{
    string result = "";
    foreach (Argument o in a.outargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
		if (o.variable.type == "string" || o.variable.type == "bin.base64" || o.variable.type == "uri" || o.variable.type == "boolean")
		{
			result += "&";
		}
		result += ArgNameLocal(o.name);
		if (o.variable.type == "bin.base64")
		{
			result += ", &" + ArgNameLocal(o.name) + "Len";
		}
    }
	if (aLeadingComma && result.Length > 0)
	{
		result = ", " + result;
	}
	return result;
}

string ArgsNames(Method a)
{
	string inStr = InArgsNames(a, false);
	string outStr = OutArgsNames(a, false);
	if (outStr.Length > 0)
	{
		outStr = ", " + outStr;
	}
	if (inStr.Length > 0)
	{
		inStr = ", " + inStr;
	}
	string result = inStr + outStr;
	return result;
}

string TemplateArgument(string aName)
{
	string[] args =  System.Environment.GetCommandLineArgs();
		
	bool isarg = false;
	
	foreach (string arg in args)
	{
		if (isarg)
		{
			string[] parts = arg.Split(new char[] {':'});
			
			if (parts.Length == 2)
			{
				if (parts[0] == aName)
				{
					return (parts[1]);
				}
			}
			
			isarg = false;
			continue;
		}
		
		if (arg == "-a")
		{
			isarg = true;
		}
	}
	
	throw (new ArgumentException(aName + " not specified"));
}
#>
