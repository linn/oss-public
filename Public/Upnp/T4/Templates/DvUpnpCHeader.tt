<#@ include file="UpnpServiceXml.tt" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Linn.Xml.UpnpServiceXml" #>
<#@ template language="C#" #>
<#
    string domain = TemplateArgument("domain");
    string type = TemplateArgument("type");

    uint version = 1;

    try
    {
	   version = Convert.ToUInt32(TemplateArgument("version"));
	}
	catch (FormatException)
	{
        throw (new ArgumentException("Invalid version number specified"));
	}
    catch (OverflowException)
    {
        throw (new ArgumentException("Invalid version number specified"));
    }

    string fileName = "";
    char[] charSeparators = new char[] {'.'};
    string[] res = domain.Split(charSeparators, StringSplitOptions.None);
    foreach (string str in res)
    {
        fileName += str.Substring(0, 1).ToUpper();
        if (str.Length > 1)
        {
            fileName += str.Substring(1, str.Length-1);
        }
    }
    fileName += type;
    fileName += version;
    string className = "DvService" + fileName;
    string callbackPrefix = "Callback" + type + version;

    Initialise();

	Document u = new Document(TemplateArgument("xml"));
#>
#ifndef HEADER_DV<#=fileName.ToUpper()#>_C
#define HEADER_DV<#=fileName.ToUpper()#>_C

#include <OsTypes.h>
#include <C/DvDevice.h>

#ifdef __cplusplus
extern "C" {
#endif

<#  foreach (Method a in u.methods) #>
<#  { #>
typedef int32_t (*<#=callbackPrefix#><#=a.name#>)(void* aPtr, uint32_t aVersion<#=ActionArgs(a)#>);
<#  } #>

DllExport THandle <#=className#>Create(DvDeviceC aDevice);
DllExport void <#=className#>Destroy(THandle aService);

<#  foreach (Method a in u.methods) #>
<#  { #>
DllExport void <#=className#>EnableAction<#=a.name#>(THandle aService, <#=callbackPrefix#><#=a.name#> aCallback, void* aPtr);
<#  } #>

<#  foreach (Variable s in u.evented) #>
<#  { #>
DllExport int32_t <#=className#>SetProperty<#=s.name#>(THandle aService, <#=PropertyInArgs(s)#>);
DllExport void <#=className#>GetProperty<#=s.name#>(THandle aService, <#=PropertyOutArgs(s)#>);
<#  } #>

#ifdef __cplusplus
} // extern "C"
#endif

#endif // HEADER_DV<#=fileName.ToUpper()#>_C

<#+
Dictionary<string,string> inArgType = new Dictionary<string,string>();
Dictionary<string,string> outArgType = new Dictionary<string,string>();

void Initialise()
{
    inArgType.Add("ui1", "uint32_t");
    inArgType.Add("ui2", "uint32_t");
    inArgType.Add("ui4", "uint32_t");
    inArgType.Add("boolean", "uint32_t");
    inArgType.Add("i1", "int32_t");
    inArgType.Add("i2", "int32_t");
    inArgType.Add("i4", "int32_t");
    inArgType.Add("string", "const char*");
    inArgType.Add("bin.base64", "const char*");
    inArgType.Add("uri", "const char*");

    outArgType.Add("ui1", "uint32_t*");
    outArgType.Add("ui2", "uint32_t*");
    outArgType.Add("ui4", "uint32_t*");
    outArgType.Add("boolean", "uint32_t*");
    outArgType.Add("i1", "int32_t*");
    outArgType.Add("i2", "int32_t*");
    outArgType.Add("i4", "int32_t*");
    outArgType.Add("string", "char**");
    outArgType.Add("bin.base64", "char**");
    outArgType.Add("uri", "char**");
}

string ActionArgs(Method a)
{
    string result = "";
    foreach (Argument i in a.inargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        result += inArgType[i.variable.type];
        result += " ";
        result += "a" + i.name;
        if (i.variable.type == "bin.base64")
        {
            result += ", uint32_t a" + i.name + "Len";
        }
    }
    foreach (Argument o in a.outargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        result += outArgType[o.variable.type];
        result += " ";
        result += "a" + o.name;
        if (o.variable.type == "bin.base64")
        {
            result += ", uint32_t* a" + o.name + "Len";
        }
    }
    if (result.Length > 0)
    {
        result = ", " + result;
    }
    return result;
}

string PropertyInArgs(Variable s)
{
    string result = inArgType[s.type] + " aValue";
    if (s.type == "bin.base64")
    {
        result += ", uint32_t aValueLen";
    }
    return result;
}

string PropertyOutArgs(Variable s)
{
    string result = outArgType[s.type] + " aValue";
    if (s.type == "bin.base64")
    {
        result += ", uint32_t* aValueLen";
    }
    return result;
}

string TemplateArgument(string aName)
{
	string[] args =  System.Environment.GetCommandLineArgs();
		
	bool isarg = false;
	
	foreach (string arg in args)
	{
		if (isarg)
		{
			string[] parts = arg.Split(new char[] {':'});
			
			if (parts.Length == 2)
			{
				if (parts[0] == aName)
				{
					return (parts[1]);
				}
			}
			
			isarg = false;
			continue;
		}
		
		if (arg == "-a")
		{
			isarg = true;
		}
	}
	
	throw (new ArgumentException(aName + " not specified"));
}
#>
