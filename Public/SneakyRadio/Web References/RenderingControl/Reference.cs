//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
// 
#pragma warning disable 1591

namespace SneakyRadio.RenderingControl {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SetVolumeBinding", Namespace="schemas-upnp-org-RenderingControl-1")]
    public partial class SetVolumeBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SetVolumeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SetVolumeBinding() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SetVolumeCompletedEventHandler SetVolumeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:schemas-upnp-org:service:RenderingControl:1#SetVolume", RequestNamespace="urn:schemas-upnp-org:service:RenderingControl:1", ResponseNamespace="urn:schemas-upnp-org:service:RenderingControl:1")]
        public void SetVolume(uint InstanceID, string Channel, ushort DesiredVolume) {
            this.Invoke("SetVolume", new object[] {
                        InstanceID,
                        Channel,
                        DesiredVolume});
        }
        
        /// <remarks/>
        public void SetVolumeAsync(uint InstanceID, string Channel, ushort DesiredVolume) {
            this.SetVolumeAsync(InstanceID, Channel, DesiredVolume, null);
        }
        
        /// <remarks/>
        public void SetVolumeAsync(uint InstanceID, string Channel, ushort DesiredVolume, object userState) {
            if ((this.SetVolumeOperationCompleted == null)) {
                this.SetVolumeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetVolumeOperationCompleted);
            }
            this.InvokeAsync("SetVolume", new object[] {
                        InstanceID,
                        Channel,
                        DesiredVolume}, this.SetVolumeOperationCompleted, userState);
        }
        
        private void OnSetVolumeOperationCompleted(object arg) {
            if ((this.SetVolumeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetVolumeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SetMuteBinding", Namespace="schemas-upnp-org-RenderingControl-1")]
    public partial class SetMuteBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SetMuteOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SetMuteBinding() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SetMuteCompletedEventHandler SetMuteCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:schemas-upnp-org:service:RenderingControl:1#SetMute", RequestNamespace="urn:schemas-upnp-org:service:RenderingControl:1", ResponseNamespace="urn:schemas-upnp-org:service:RenderingControl:1")]
        public void SetMute(uint InstanceID, string Channel, bool DesiredMute) {
            this.Invoke("SetMute", new object[] {
                        InstanceID,
                        Channel,
                        DesiredMute});
        }
        
        /// <remarks/>
        public void SetMuteAsync(uint InstanceID, string Channel, bool DesiredMute) {
            this.SetMuteAsync(InstanceID, Channel, DesiredMute, null);
        }
        
        /// <remarks/>
        public void SetMuteAsync(uint InstanceID, string Channel, bool DesiredMute, object userState) {
            if ((this.SetMuteOperationCompleted == null)) {
                this.SetMuteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetMuteOperationCompleted);
            }
            this.InvokeAsync("SetMute", new object[] {
                        InstanceID,
                        Channel,
                        DesiredMute}, this.SetMuteOperationCompleted, userState);
        }
        
        private void OnSetMuteOperationCompleted(object arg) {
            if ((this.SetMuteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetMuteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void SetVolumeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void SetMuteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591