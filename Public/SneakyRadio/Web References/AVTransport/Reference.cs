//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
// 
#pragma warning disable 1591

namespace SneakyRadio.AVTransport {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SetAVTransportURIBinding", Namespace="schemas-upnp-org-AVTransport-1")]
    public partial class SetAVTransportURIBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SetAVTransportURIOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SetAVTransportURIBinding() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SetAVTransportURICompletedEventHandler SetAVTransportURICompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:schemas-upnp-org:service:AVTransport:1#SetAVTransportURI", RequestNamespace="urn:schemas-upnp-org:service:AVTransport:1", ResponseNamespace="urn:schemas-upnp-org:service:AVTransport:1")]
        public void SetAVTransportURI(uint InstanceID, string CurrentURI, string CurrentURIMetaData) {
            this.Invoke("SetAVTransportURI", new object[] {
                        InstanceID,
                        CurrentURI,
                        CurrentURIMetaData});
        }
        
        /// <remarks/>
        public void SetAVTransportURIAsync(uint InstanceID, string CurrentURI, string CurrentURIMetaData) {
            this.SetAVTransportURIAsync(InstanceID, CurrentURI, CurrentURIMetaData, null);
        }
        
        /// <remarks/>
        public void SetAVTransportURIAsync(uint InstanceID, string CurrentURI, string CurrentURIMetaData, object userState) {
            if ((this.SetAVTransportURIOperationCompleted == null)) {
                this.SetAVTransportURIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAVTransportURIOperationCompleted);
            }
            this.InvokeAsync("SetAVTransportURI", new object[] {
                        InstanceID,
                        CurrentURI,
                        CurrentURIMetaData}, this.SetAVTransportURIOperationCompleted, userState);
        }
        
        private void OnSetAVTransportURIOperationCompleted(object arg) {
            if ((this.SetAVTransportURICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAVTransportURICompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SetNextAVTransportURIBinding", Namespace="schemas-upnp-org-AVTransport-1")]
    public partial class SetNextAVTransportURIBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SetNextAVTransportURIOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SetNextAVTransportURIBinding() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SetNextAVTransportURICompletedEventHandler SetNextAVTransportURICompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:schemas-upnp-org:service:AVTransport:1#SetNextAVTransportURI", RequestNamespace="urn:schemas-upnp-org:service:AVTransport:1", ResponseNamespace="urn:schemas-upnp-org:service:AVTransport:1")]
        public void SetNextAVTransportURI(uint InstanceID, string NextURI, string NextURIMetaData) {
            this.Invoke("SetNextAVTransportURI", new object[] {
                        InstanceID,
                        NextURI,
                        NextURIMetaData});
        }
        
        /// <remarks/>
        public void SetNextAVTransportURIAsync(uint InstanceID, string NextURI, string NextURIMetaData) {
            this.SetNextAVTransportURIAsync(InstanceID, NextURI, NextURIMetaData, null);
        }
        
        /// <remarks/>
        public void SetNextAVTransportURIAsync(uint InstanceID, string NextURI, string NextURIMetaData, object userState) {
            if ((this.SetNextAVTransportURIOperationCompleted == null)) {
                this.SetNextAVTransportURIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetNextAVTransportURIOperationCompleted);
            }
            this.InvokeAsync("SetNextAVTransportURI", new object[] {
                        InstanceID,
                        NextURI,
                        NextURIMetaData}, this.SetNextAVTransportURIOperationCompleted, userState);
        }
        
        private void OnSetNextAVTransportURIOperationCompleted(object arg) {
            if ((this.SetNextAVTransportURICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetNextAVTransportURICompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="GetMediaInfoBinding", Namespace="schemas-upnp-org-AVTransport-1")]
    public partial class GetMediaInfoBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetMediaInfoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public GetMediaInfoBinding() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetMediaInfoCompletedEventHandler GetMediaInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:schemas-upnp-org:service:AVTransport:1#GetMediaInfo", RequestNamespace="urn:schemas-upnp-org:service:AVTransport:1", ResponseNamespace="urn:schemas-upnp-org:service:AVTransport:1")]
        [return: System.Xml.Serialization.SoapElementAttribute("NrTracks")]
        public uint GetMediaInfo(uint InstanceID, out string MediaDuration, out string CurrentURI, out string CurrentURIMetaData, out string NextURI, out string NextURIMetaData, out string PlayMedium, out string RecordMedium, out string WriteStatus) {
            object[] results = this.Invoke("GetMediaInfo", new object[] {
                        InstanceID});
            MediaDuration = ((string)(results[1]));
            CurrentURI = ((string)(results[2]));
            CurrentURIMetaData = ((string)(results[3]));
            NextURI = ((string)(results[4]));
            NextURIMetaData = ((string)(results[5]));
            PlayMedium = ((string)(results[6]));
            RecordMedium = ((string)(results[7]));
            WriteStatus = ((string)(results[8]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void GetMediaInfoAsync(uint InstanceID) {
            this.GetMediaInfoAsync(InstanceID, null);
        }
        
        /// <remarks/>
        public void GetMediaInfoAsync(uint InstanceID, object userState) {
            if ((this.GetMediaInfoOperationCompleted == null)) {
                this.GetMediaInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMediaInfoOperationCompleted);
            }
            this.InvokeAsync("GetMediaInfo", new object[] {
                        InstanceID}, this.GetMediaInfoOperationCompleted, userState);
        }
        
        private void OnGetMediaInfoOperationCompleted(object arg) {
            if ((this.GetMediaInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMediaInfoCompleted(this, new GetMediaInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="GetMediaInfo_ExtBinding", Namespace="schemas-upnp-org-AVTransport-1")]
    public partial class GetMediaInfo_ExtBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetMediaInfo_ExtOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public GetMediaInfo_ExtBinding() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetMediaInfo_ExtCompletedEventHandler GetMediaInfo_ExtCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:schemas-upnp-org:service:AVTransport:1#GetMediaInfo_Ext", RequestNamespace="urn:schemas-upnp-org:service:AVTransport:1", ResponseNamespace="urn:schemas-upnp-org:service:AVTransport:1")]
        [return: System.Xml.Serialization.SoapElementAttribute("CurrentType")]
        public string GetMediaInfo_Ext(uint InstanceID, out uint NrTracks, out string MediaDuration, out string CurrentURI, out string CurrentURIMetaData, out string NextURI, out string NextURIMetaData, out string PlayMedium, out string RecordMedium, out string WriteStatus) {
            object[] results = this.Invoke("GetMediaInfo_Ext", new object[] {
                        InstanceID});
            NrTracks = ((uint)(results[1]));
            MediaDuration = ((string)(results[2]));
            CurrentURI = ((string)(results[3]));
            CurrentURIMetaData = ((string)(results[4]));
            NextURI = ((string)(results[5]));
            NextURIMetaData = ((string)(results[6]));
            PlayMedium = ((string)(results[7]));
            RecordMedium = ((string)(results[8]));
            WriteStatus = ((string)(results[9]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMediaInfo_ExtAsync(uint InstanceID) {
            this.GetMediaInfo_ExtAsync(InstanceID, null);
        }
        
        /// <remarks/>
        public void GetMediaInfo_ExtAsync(uint InstanceID, object userState) {
            if ((this.GetMediaInfo_ExtOperationCompleted == null)) {
                this.GetMediaInfo_ExtOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMediaInfo_ExtOperationCompleted);
            }
            this.InvokeAsync("GetMediaInfo_Ext", new object[] {
                        InstanceID}, this.GetMediaInfo_ExtOperationCompleted, userState);
        }
        
        private void OnGetMediaInfo_ExtOperationCompleted(object arg) {
            if ((this.GetMediaInfo_ExtCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMediaInfo_ExtCompleted(this, new GetMediaInfo_ExtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="GetTransportInfoBinding", Namespace="schemas-upnp-org-AVTransport-1")]
    public partial class GetTransportInfoBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetTransportInfoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public GetTransportInfoBinding() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetTransportInfoCompletedEventHandler GetTransportInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:schemas-upnp-org:service:AVTransport:1#GetTransportInfo", RequestNamespace="urn:schemas-upnp-org:service:AVTransport:1", ResponseNamespace="urn:schemas-upnp-org:service:AVTransport:1")]
        [return: System.Xml.Serialization.SoapElementAttribute("CurrentTransportState")]
        public string GetTransportInfo(uint InstanceID, out string CurrentTransportStatus, out string CurrentSpeed) {
            object[] results = this.Invoke("GetTransportInfo", new object[] {
                        InstanceID});
            CurrentTransportStatus = ((string)(results[1]));
            CurrentSpeed = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransportInfoAsync(uint InstanceID) {
            this.GetTransportInfoAsync(InstanceID, null);
        }
        
        /// <remarks/>
        public void GetTransportInfoAsync(uint InstanceID, object userState) {
            if ((this.GetTransportInfoOperationCompleted == null)) {
                this.GetTransportInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransportInfoOperationCompleted);
            }
            this.InvokeAsync("GetTransportInfo", new object[] {
                        InstanceID}, this.GetTransportInfoOperationCompleted, userState);
        }
        
        private void OnGetTransportInfoOperationCompleted(object arg) {
            if ((this.GetTransportInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransportInfoCompleted(this, new GetTransportInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="GetPositionInfoBinding", Namespace="schemas-upnp-org-AVTransport-1")]
    public partial class GetPositionInfoBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetPositionInfoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public GetPositionInfoBinding() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetPositionInfoCompletedEventHandler GetPositionInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:schemas-upnp-org:service:AVTransport:1#GetPositionInfo", RequestNamespace="urn:schemas-upnp-org:service:AVTransport:1", ResponseNamespace="urn:schemas-upnp-org:service:AVTransport:1")]
        [return: System.Xml.Serialization.SoapElementAttribute("Track")]
        public uint GetPositionInfo(uint InstanceID, out string TrackDuration, out string TrackMetaData, out string TrackURI, out string RelTime, out string AbsTime, out int RelCount, out uint AbsCount) {
            object[] results = this.Invoke("GetPositionInfo", new object[] {
                        InstanceID});
            TrackDuration = ((string)(results[1]));
            TrackMetaData = ((string)(results[2]));
            TrackURI = ((string)(results[3]));
            RelTime = ((string)(results[4]));
            AbsTime = ((string)(results[5]));
            RelCount = ((int)(results[6]));
            AbsCount = ((uint)(results[7]));
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void GetPositionInfoAsync(uint InstanceID) {
            this.GetPositionInfoAsync(InstanceID, null);
        }
        
        /// <remarks/>
        public void GetPositionInfoAsync(uint InstanceID, object userState) {
            if ((this.GetPositionInfoOperationCompleted == null)) {
                this.GetPositionInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPositionInfoOperationCompleted);
            }
            this.InvokeAsync("GetPositionInfo", new object[] {
                        InstanceID}, this.GetPositionInfoOperationCompleted, userState);
        }
        
        private void OnGetPositionInfoOperationCompleted(object arg) {
            if ((this.GetPositionInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPositionInfoCompleted(this, new GetPositionInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="GetDeviceCapabilitiesBinding", Namespace="schemas-upnp-org-AVTransport-1")]
    public partial class GetDeviceCapabilitiesBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetDeviceCapabilitiesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public GetDeviceCapabilitiesBinding() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetDeviceCapabilitiesCompletedEventHandler GetDeviceCapabilitiesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:schemas-upnp-org:service:AVTransport:1#GetDeviceCapabilities", RequestNamespace="urn:schemas-upnp-org:service:AVTransport:1", ResponseNamespace="urn:schemas-upnp-org:service:AVTransport:1")]
        [return: System.Xml.Serialization.SoapElementAttribute("PlayMedia")]
        public string GetDeviceCapabilities(uint InstanceID, out string RecMedia, out string RecQualityModes) {
            object[] results = this.Invoke("GetDeviceCapabilities", new object[] {
                        InstanceID});
            RecMedia = ((string)(results[1]));
            RecQualityModes = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDeviceCapabilitiesAsync(uint InstanceID) {
            this.GetDeviceCapabilitiesAsync(InstanceID, null);
        }
        
        /// <remarks/>
        public void GetDeviceCapabilitiesAsync(uint InstanceID, object userState) {
            if ((this.GetDeviceCapabilitiesOperationCompleted == null)) {
                this.GetDeviceCapabilitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeviceCapabilitiesOperationCompleted);
            }
            this.InvokeAsync("GetDeviceCapabilities", new object[] {
                        InstanceID}, this.GetDeviceCapabilitiesOperationCompleted, userState);
        }
        
        private void OnGetDeviceCapabilitiesOperationCompleted(object arg) {
            if ((this.GetDeviceCapabilitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeviceCapabilitiesCompleted(this, new GetDeviceCapabilitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="GetTransportSettingsBinding", Namespace="schemas-upnp-org-AVTransport-1")]
    public partial class GetTransportSettingsBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetTransportSettingsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public GetTransportSettingsBinding() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetTransportSettingsCompletedEventHandler GetTransportSettingsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:schemas-upnp-org:service:AVTransport:1#GetTransportSettings", RequestNamespace="urn:schemas-upnp-org:service:AVTransport:1", ResponseNamespace="urn:schemas-upnp-org:service:AVTransport:1")]
        [return: System.Xml.Serialization.SoapElementAttribute("PlayMode")]
        public string GetTransportSettings(uint InstanceID, out string RecQualityMode) {
            object[] results = this.Invoke("GetTransportSettings", new object[] {
                        InstanceID});
            RecQualityMode = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransportSettingsAsync(uint InstanceID) {
            this.GetTransportSettingsAsync(InstanceID, null);
        }
        
        /// <remarks/>
        public void GetTransportSettingsAsync(uint InstanceID, object userState) {
            if ((this.GetTransportSettingsOperationCompleted == null)) {
                this.GetTransportSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransportSettingsOperationCompleted);
            }
            this.InvokeAsync("GetTransportSettings", new object[] {
                        InstanceID}, this.GetTransportSettingsOperationCompleted, userState);
        }
        
        private void OnGetTransportSettingsOperationCompleted(object arg) {
            if ((this.GetTransportSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransportSettingsCompleted(this, new GetTransportSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="StopBinding", Namespace="schemas-upnp-org-AVTransport-1")]
    public partial class StopBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback StopOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public StopBinding() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event StopCompletedEventHandler StopCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:schemas-upnp-org:service:AVTransport:1#Stop", RequestNamespace="urn:schemas-upnp-org:service:AVTransport:1", ResponseNamespace="urn:schemas-upnp-org:service:AVTransport:1")]
        public void Stop(uint InstanceID) {
            this.Invoke("Stop", new object[] {
                        InstanceID});
        }
        
        /// <remarks/>
        public void StopAsync(uint InstanceID) {
            this.StopAsync(InstanceID, null);
        }
        
        /// <remarks/>
        public void StopAsync(uint InstanceID, object userState) {
            if ((this.StopOperationCompleted == null)) {
                this.StopOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopOperationCompleted);
            }
            this.InvokeAsync("Stop", new object[] {
                        InstanceID}, this.StopOperationCompleted, userState);
        }
        
        private void OnStopOperationCompleted(object arg) {
            if ((this.StopCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StopCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PlayBinding", Namespace="schemas-upnp-org-AVTransport-1")]
    public partial class PlayBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback PlayOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PlayBinding() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event PlayCompletedEventHandler PlayCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:schemas-upnp-org:service:AVTransport:1#Play", RequestNamespace="urn:schemas-upnp-org:service:AVTransport:1", ResponseNamespace="urn:schemas-upnp-org:service:AVTransport:1")]
        public void Play(uint InstanceID, string Speed) {
            this.Invoke("Play", new object[] {
                        InstanceID,
                        Speed});
        }
        
        /// <remarks/>
        public void PlayAsync(uint InstanceID, string Speed) {
            this.PlayAsync(InstanceID, Speed, null);
        }
        
        /// <remarks/>
        public void PlayAsync(uint InstanceID, string Speed, object userState) {
            if ((this.PlayOperationCompleted == null)) {
                this.PlayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPlayOperationCompleted);
            }
            this.InvokeAsync("Play", new object[] {
                        InstanceID,
                        Speed}, this.PlayOperationCompleted, userState);
        }
        
        private void OnPlayOperationCompleted(object arg) {
            if ((this.PlayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PlayCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PauseBinding", Namespace="schemas-upnp-org-AVTransport-1")]
    public partial class PauseBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback PauseOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PauseBinding() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event PauseCompletedEventHandler PauseCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:schemas-upnp-org:service:AVTransport:1#Pause", RequestNamespace="urn:schemas-upnp-org:service:AVTransport:1", ResponseNamespace="urn:schemas-upnp-org:service:AVTransport:1")]
        public void Pause(uint InstanceID) {
            this.Invoke("Pause", new object[] {
                        InstanceID});
        }
        
        /// <remarks/>
        public void PauseAsync(uint InstanceID) {
            this.PauseAsync(InstanceID, null);
        }
        
        /// <remarks/>
        public void PauseAsync(uint InstanceID, object userState) {
            if ((this.PauseOperationCompleted == null)) {
                this.PauseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPauseOperationCompleted);
            }
            this.InvokeAsync("Pause", new object[] {
                        InstanceID}, this.PauseOperationCompleted, userState);
        }
        
        private void OnPauseOperationCompleted(object arg) {
            if ((this.PauseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PauseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RecordBinding", Namespace="schemas-upnp-org-AVTransport-1")]
    public partial class RecordBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback RecordOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public RecordBinding() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event RecordCompletedEventHandler RecordCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:schemas-upnp-org:service:AVTransport:1#Record", RequestNamespace="urn:schemas-upnp-org:service:AVTransport:1", ResponseNamespace="urn:schemas-upnp-org:service:AVTransport:1")]
        public void Record(uint InstanceID) {
            this.Invoke("Record", new object[] {
                        InstanceID});
        }
        
        /// <remarks/>
        public void RecordAsync(uint InstanceID) {
            this.RecordAsync(InstanceID, null);
        }
        
        /// <remarks/>
        public void RecordAsync(uint InstanceID, object userState) {
            if ((this.RecordOperationCompleted == null)) {
                this.RecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecordOperationCompleted);
            }
            this.InvokeAsync("Record", new object[] {
                        InstanceID}, this.RecordOperationCompleted, userState);
        }
        
        private void OnRecordOperationCompleted(object arg) {
            if ((this.RecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SeekBinding", Namespace="schemas-upnp-org-AVTransport-1")]
    public partial class SeekBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SeekOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SeekBinding() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SeekCompletedEventHandler SeekCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:schemas-upnp-org:service:AVTransport:1#Seek", RequestNamespace="urn:schemas-upnp-org:service:AVTransport:1", ResponseNamespace="urn:schemas-upnp-org:service:AVTransport:1")]
        public void Seek(uint InstanceID, string Unit, string Target) {
            this.Invoke("Seek", new object[] {
                        InstanceID,
                        Unit,
                        Target});
        }
        
        /// <remarks/>
        public void SeekAsync(uint InstanceID, string Unit, string Target) {
            this.SeekAsync(InstanceID, Unit, Target, null);
        }
        
        /// <remarks/>
        public void SeekAsync(uint InstanceID, string Unit, string Target, object userState) {
            if ((this.SeekOperationCompleted == null)) {
                this.SeekOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSeekOperationCompleted);
            }
            this.InvokeAsync("Seek", new object[] {
                        InstanceID,
                        Unit,
                        Target}, this.SeekOperationCompleted, userState);
        }
        
        private void OnSeekOperationCompleted(object arg) {
            if ((this.SeekCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SeekCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="NextBinding", Namespace="schemas-upnp-org-AVTransport-1")]
    public partial class NextBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback NextOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public NextBinding() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event NextCompletedEventHandler NextCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:schemas-upnp-org:service:AVTransport:1#Next", RequestNamespace="urn:schemas-upnp-org:service:AVTransport:1", ResponseNamespace="urn:schemas-upnp-org:service:AVTransport:1")]
        public void Next(uint InstanceID) {
            this.Invoke("Next", new object[] {
                        InstanceID});
        }
        
        /// <remarks/>
        public void NextAsync(uint InstanceID) {
            this.NextAsync(InstanceID, null);
        }
        
        /// <remarks/>
        public void NextAsync(uint InstanceID, object userState) {
            if ((this.NextOperationCompleted == null)) {
                this.NextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNextOperationCompleted);
            }
            this.InvokeAsync("Next", new object[] {
                        InstanceID}, this.NextOperationCompleted, userState);
        }
        
        private void OnNextOperationCompleted(object arg) {
            if ((this.NextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NextCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PreviousBinding", Namespace="schemas-upnp-org-AVTransport-1")]
    public partial class PreviousBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback PreviousOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PreviousBinding() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event PreviousCompletedEventHandler PreviousCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:schemas-upnp-org:service:AVTransport:1#Previous", RequestNamespace="urn:schemas-upnp-org:service:AVTransport:1", ResponseNamespace="urn:schemas-upnp-org:service:AVTransport:1")]
        public void Previous(uint InstanceID) {
            this.Invoke("Previous", new object[] {
                        InstanceID});
        }
        
        /// <remarks/>
        public void PreviousAsync(uint InstanceID) {
            this.PreviousAsync(InstanceID, null);
        }
        
        /// <remarks/>
        public void PreviousAsync(uint InstanceID, object userState) {
            if ((this.PreviousOperationCompleted == null)) {
                this.PreviousOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPreviousOperationCompleted);
            }
            this.InvokeAsync("Previous", new object[] {
                        InstanceID}, this.PreviousOperationCompleted, userState);
        }
        
        private void OnPreviousOperationCompleted(object arg) {
            if ((this.PreviousCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PreviousCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SetPlayModeBinding", Namespace="schemas-upnp-org-AVTransport-1")]
    public partial class SetPlayModeBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SetPlayModeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SetPlayModeBinding() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SetPlayModeCompletedEventHandler SetPlayModeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:schemas-upnp-org:service:AVTransport:1#SetPlayMode", RequestNamespace="urn:schemas-upnp-org:service:AVTransport:1", ResponseNamespace="urn:schemas-upnp-org:service:AVTransport:1")]
        public void SetPlayMode(uint InstanceID, string NewPlayMode) {
            this.Invoke("SetPlayMode", new object[] {
                        InstanceID,
                        NewPlayMode});
        }
        
        /// <remarks/>
        public void SetPlayModeAsync(uint InstanceID, string NewPlayMode) {
            this.SetPlayModeAsync(InstanceID, NewPlayMode, null);
        }
        
        /// <remarks/>
        public void SetPlayModeAsync(uint InstanceID, string NewPlayMode, object userState) {
            if ((this.SetPlayModeOperationCompleted == null)) {
                this.SetPlayModeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPlayModeOperationCompleted);
            }
            this.InvokeAsync("SetPlayMode", new object[] {
                        InstanceID,
                        NewPlayMode}, this.SetPlayModeOperationCompleted, userState);
        }
        
        private void OnSetPlayModeOperationCompleted(object arg) {
            if ((this.SetPlayModeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPlayModeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SetRecordQualityModeBinding", Namespace="schemas-upnp-org-AVTransport-1")]
    public partial class SetRecordQualityModeBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SetRecordQualityModeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SetRecordQualityModeBinding() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SetRecordQualityModeCompletedEventHandler SetRecordQualityModeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:schemas-upnp-org:service:AVTransport:1#SetRecordQualityMode", RequestNamespace="urn:schemas-upnp-org:service:AVTransport:1", ResponseNamespace="urn:schemas-upnp-org:service:AVTransport:1")]
        public void SetRecordQualityMode(uint InstanceID, string NewRecordQualityMode) {
            this.Invoke("SetRecordQualityMode", new object[] {
                        InstanceID,
                        NewRecordQualityMode});
        }
        
        /// <remarks/>
        public void SetRecordQualityModeAsync(uint InstanceID, string NewRecordQualityMode) {
            this.SetRecordQualityModeAsync(InstanceID, NewRecordQualityMode, null);
        }
        
        /// <remarks/>
        public void SetRecordQualityModeAsync(uint InstanceID, string NewRecordQualityMode, object userState) {
            if ((this.SetRecordQualityModeOperationCompleted == null)) {
                this.SetRecordQualityModeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetRecordQualityModeOperationCompleted);
            }
            this.InvokeAsync("SetRecordQualityMode", new object[] {
                        InstanceID,
                        NewRecordQualityMode}, this.SetRecordQualityModeOperationCompleted, userState);
        }
        
        private void OnSetRecordQualityModeOperationCompleted(object arg) {
            if ((this.SetRecordQualityModeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetRecordQualityModeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="GetCurrentTransportActionsBinding", Namespace="schemas-upnp-org-AVTransport-1")]
    public partial class GetCurrentTransportActionsBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetCurrentTransportActionsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public GetCurrentTransportActionsBinding() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetCurrentTransportActionsCompletedEventHandler GetCurrentTransportActionsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:schemas-upnp-org:service:AVTransport:1#GetCurrentTransportActions", RequestNamespace="urn:schemas-upnp-org:service:AVTransport:1", ResponseNamespace="urn:schemas-upnp-org:service:AVTransport:1")]
        [return: System.Xml.Serialization.SoapElementAttribute("Actions")]
        public string GetCurrentTransportActions(uint InstanceID) {
            object[] results = this.Invoke("GetCurrentTransportActions", new object[] {
                        InstanceID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentTransportActionsAsync(uint InstanceID) {
            this.GetCurrentTransportActionsAsync(InstanceID, null);
        }
        
        /// <remarks/>
        public void GetCurrentTransportActionsAsync(uint InstanceID, object userState) {
            if ((this.GetCurrentTransportActionsOperationCompleted == null)) {
                this.GetCurrentTransportActionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentTransportActionsOperationCompleted);
            }
            this.InvokeAsync("GetCurrentTransportActions", new object[] {
                        InstanceID}, this.GetCurrentTransportActionsOperationCompleted, userState);
        }
        
        private void OnGetCurrentTransportActionsOperationCompleted(object arg) {
            if ((this.GetCurrentTransportActionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentTransportActionsCompleted(this, new GetCurrentTransportActionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="GetDRMStateBinding", Namespace="schemas-upnp-org-AVTransport-1")]
    public partial class GetDRMStateBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetDRMStateOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public GetDRMStateBinding() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetDRMStateCompletedEventHandler GetDRMStateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:schemas-upnp-org:service:AVTransport:1#GetDRMState", RequestNamespace="urn:schemas-upnp-org:service:AVTransport:1", ResponseNamespace="urn:schemas-upnp-org:service:AVTransport:1")]
        [return: System.Xml.Serialization.SoapElementAttribute("CurentDRMState")]
        public string GetDRMState(uint InstanceID) {
            object[] results = this.Invoke("GetDRMState", new object[] {
                        InstanceID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDRMStateAsync(uint InstanceID) {
            this.GetDRMStateAsync(InstanceID, null);
        }
        
        /// <remarks/>
        public void GetDRMStateAsync(uint InstanceID, object userState) {
            if ((this.GetDRMStateOperationCompleted == null)) {
                this.GetDRMStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDRMStateOperationCompleted);
            }
            this.InvokeAsync("GetDRMState", new object[] {
                        InstanceID}, this.GetDRMStateOperationCompleted, userState);
        }
        
        private void OnGetDRMStateOperationCompleted(object arg) {
            if ((this.GetDRMStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDRMStateCompleted(this, new GetDRMStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="GetStateVariablesBinding", Namespace="schemas-upnp-org-AVTransport-1")]
    public partial class GetStateVariablesBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetStateVariablesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public GetStateVariablesBinding() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetStateVariablesCompletedEventHandler GetStateVariablesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:schemas-upnp-org:service:AVTransport:1#GetStateVariables", RequestNamespace="urn:schemas-upnp-org:service:AVTransport:1", ResponseNamespace="urn:schemas-upnp-org:service:AVTransport:1")]
        [return: System.Xml.Serialization.SoapElementAttribute("StateVariableValuePairs")]
        public string GetStateVariables(uint InstanceID, string StateVariableList) {
            object[] results = this.Invoke("GetStateVariables", new object[] {
                        InstanceID,
                        StateVariableList});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetStateVariablesAsync(uint InstanceID, string StateVariableList) {
            this.GetStateVariablesAsync(InstanceID, StateVariableList, null);
        }
        
        /// <remarks/>
        public void GetStateVariablesAsync(uint InstanceID, string StateVariableList, object userState) {
            if ((this.GetStateVariablesOperationCompleted == null)) {
                this.GetStateVariablesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStateVariablesOperationCompleted);
            }
            this.InvokeAsync("GetStateVariables", new object[] {
                        InstanceID,
                        StateVariableList}, this.GetStateVariablesOperationCompleted, userState);
        }
        
        private void OnGetStateVariablesOperationCompleted(object arg) {
            if ((this.GetStateVariablesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStateVariablesCompleted(this, new GetStateVariablesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SetStateVariablesBinding", Namespace="schemas-upnp-org-AVTransport-1")]
    public partial class SetStateVariablesBinding : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SetStateVariablesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SetStateVariablesBinding() {
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SetStateVariablesCompletedEventHandler SetStateVariablesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:schemas-upnp-org:service:AVTransport:1#SetStateVariables", RequestNamespace="urn:schemas-upnp-org:service:AVTransport:1", ResponseNamespace="urn:schemas-upnp-org:service:AVTransport:1")]
        [return: System.Xml.Serialization.SoapElementAttribute("StateVariableList")]
        public string SetStateVariables(uint InstanceID, string AVTransportUDN, string ServiceType, string ServiceId, string StateVariableValuePairs) {
            object[] results = this.Invoke("SetStateVariables", new object[] {
                        InstanceID,
                        AVTransportUDN,
                        ServiceType,
                        ServiceId,
                        StateVariableValuePairs});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetStateVariablesAsync(uint InstanceID, string AVTransportUDN, string ServiceType, string ServiceId, string StateVariableValuePairs) {
            this.SetStateVariablesAsync(InstanceID, AVTransportUDN, ServiceType, ServiceId, StateVariableValuePairs, null);
        }
        
        /// <remarks/>
        public void SetStateVariablesAsync(uint InstanceID, string AVTransportUDN, string ServiceType, string ServiceId, string StateVariableValuePairs, object userState) {
            if ((this.SetStateVariablesOperationCompleted == null)) {
                this.SetStateVariablesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetStateVariablesOperationCompleted);
            }
            this.InvokeAsync("SetStateVariables", new object[] {
                        InstanceID,
                        AVTransportUDN,
                        ServiceType,
                        ServiceId,
                        StateVariableValuePairs}, this.SetStateVariablesOperationCompleted, userState);
        }
        
        private void OnSetStateVariablesOperationCompleted(object arg) {
            if ((this.SetStateVariablesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetStateVariablesCompleted(this, new SetStateVariablesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void SetAVTransportURICompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void SetNextAVTransportURICompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetMediaInfoCompletedEventHandler(object sender, GetMediaInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMediaInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMediaInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string MediaDuration {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string CurrentURI {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string CurrentURIMetaData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string NextURI {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string NextURIMetaData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string PlayMedium {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string RecordMedium {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string WriteStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetMediaInfo_ExtCompletedEventHandler(object sender, GetMediaInfo_ExtCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMediaInfo_ExtCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMediaInfo_ExtCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public uint NrTracks {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string MediaDuration {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string CurrentURI {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string CurrentURIMetaData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string NextURI {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string NextURIMetaData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string PlayMedium {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string RecordMedium {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string WriteStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetTransportInfoCompletedEventHandler(object sender, GetTransportInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransportInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransportInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string CurrentTransportStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string CurrentSpeed {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetPositionInfoCompletedEventHandler(object sender, GetPositionInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPositionInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPositionInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string TrackDuration {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string TrackMetaData {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TrackURI {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string RelTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string AbsTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public int RelCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public uint AbsCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetDeviceCapabilitiesCompletedEventHandler(object sender, GetDeviceCapabilitiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeviceCapabilitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDeviceCapabilitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string RecMedia {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string RecQualityModes {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetTransportSettingsCompletedEventHandler(object sender, GetTransportSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransportSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransportSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string RecQualityMode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void StopCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void PlayCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void PauseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RecordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void SeekCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void NextCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void PreviousCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void SetPlayModeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void SetRecordQualityModeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetCurrentTransportActionsCompletedEventHandler(object sender, GetCurrentTransportActionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentTransportActionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentTransportActionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetDRMStateCompletedEventHandler(object sender, GetDRMStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDRMStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDRMStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetStateVariablesCompletedEventHandler(object sender, GetStateVariablesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStateVariablesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStateVariablesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void SetStateVariablesCompletedEventHandler(object sender, SetStateVariablesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetStateVariablesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetStateVariablesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591