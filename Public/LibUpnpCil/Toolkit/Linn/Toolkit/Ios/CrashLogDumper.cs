using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;

using Linn;

namespace Linn.Toolkit.Ios
{
    public class CrashLogDumper : ICrashLogDumper
    {
        private class Delegate : UIAlertViewDelegate
        {
            public Delegate(DebugReport aDebugReport, string aTitle, string aReportText)
            {
                iDebugReport = aDebugReport;
                iTitle = aTitle;
                iReportText = aReportText;
            }

            public override void Dismissed(UIAlertView aAlertView, int aButtonIndex)
            {
                if(aButtonIndex == 1)
                {
                    // post data to Linn
                    iDebugReport.Post(iTitle, iReportText);
                }
            }

            private DebugReport iDebugReport;
            private string iTitle;
            private string iReportText;
        }

        public CrashLogDumper(string aTitle, string aProduct, string aVersion)
        {
            iTitle = aTitle;
            iProduct = aProduct;
            iVersion = aVersion;
            iAutoSend = false;
        }

        public void Dump(CrashLog aCrashLog)
        {
            // include some system details in report
            string reportText = aCrashLog.ToString();

            DebugReport report = new DebugReport("Crash log generated by " + iProduct + " ver " + iVersion);
            /*iDelegate = new Delegate(report, iTitle, reportText);
            UIAlertView alert = new UIAlertView(iTitle, "The application " + iTitle + " quit unexpectedly", iDelegate,
                                                "Close", new string[] { "Report and Close" });
            alert.Show();*/

            if(iAutoSend)
            {
                report.Post(iTitle, reportText);
            }
        }

        public void SetAutoSend(bool aAutoSend)
        {
            iAutoSend = aAutoSend;
        }

        private string iTitle;
        private string iProduct;
        private string iVersion;

        private bool iAutoSend;
        //private Delegate iDelegate;
    }
}
