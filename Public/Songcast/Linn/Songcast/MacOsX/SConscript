Import('_default_env kBuildInfo appAssemblyInfo')


# build folders for the components of songcast - we need scons nodes for these
# folders as they are passed to other builders

driverFolder = _default_env.Command('LinnSongcast.kext', '', [Mkdir('$TARGET')])
distFolder = _default_env.Command('InstallerDist', '', [Mkdir('$TARGET')])
scriptsFolder = _default_env.Command('InstallerScripts', '', [Mkdir('$TARGET')])
dmgContentsFolder = _default_env.Command('InstallerDmgContents', '', [Mkdir('$TARGET')])


# build the songcast app

app = SConscript('App/SConscript', exports = ['_default_env', 'kBuildInfo', 'appAssemblyInfo'])


# build the songcast preferences plugin

prefs = SConscript('Prefs/SConscript', exports = ['_default_env', 'kBuildInfo'])


# define compile flags for the driver code

branding_flags  = ' -D\'BRANDING_AUDIODEVICE_CLASSNAME=uk_co_linn_songcast\''
branding_flags += ' -D\'BRANDING_AUDIODEVICE_NAME="Linn Songcast"\''
branding_flags += ' -D\'BRANDING_AUDIODEVICE_SHORTNAME="LinnSongcast"\''
branding_flags += ' -D\'BRANDING_AUDIODEVICE_MANUFACTURERNAME="Linn Products Ltd"\''
branding_flags += ' -D\'BRANDING_AUDIOENGINE_CLASSNAME=uk_co_linn_songcast_audioengine\''
branding_flags += ' -D\'BRANDING_AUDIOUSERCLIENT_CLASSNAME=uk_co_linn_songcast_userclient\''
branding_flags += ' -D\'BRANDING_KEXTINFO_KMODNAME=uk.co.linn.songcast\''
branding_flags += ' -D\'BRANDING_KEXTINFO_KMODVERSION="' + kBuildInfo['BUILD_INFO_VERSION'] + '"\''

if _default_env['variant'] == 'debug':
    debug_specific_flags = '-O0'
else:
    debug_specific_flags = '-Os'

compiler_flags = '-c -fmessage-length=0 -pipe -nostdinc -Wno-trigraphs -fasm-blocks -force_cpusubtype_ALL ' + debug_specific_flags + ' -finline -fno-keep-inline-functions -Wreturn-type -Wunused-variable -DKERNEL -DKERNEL_PRIVATE -DDRIVER_PRIVATE -DAPPLE -DNeXT -isysroot /Developer/SDKs/MacOSX10.6.sdk -mmacosx-version-min=10.6 -gdwarf-2 -I/System/Library/Frameworks/Kernel.framework/Headers -IOpenHome/MacOsX/Driver/' + branding_flags

cpp_flags = '-x c++ ' + compiler_flags + ' -msoft-float -fno-builtin -fno-common -mkernel -fno-exceptions -fno-rtti -fcheck-new -fapple-kext'

c_flags = '-x c -std=gnu99 ' + compiler_flags + ' -msoft-float -fno-builtin -fno-common -mkernel'

link_flags1 = '-isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.6.sdk '
link_flags2 = ' -mmacosx-version-min=10.6 -lcpp_kext -Xlinker -kext -nostdlib -lkmodc++ -lkmod -lcc_kext'


# AudioClip.cpp is the only file containing floating point operations - this is compiled with floating point support as recommended in the apple documentation
audio_clip_flags = '-x c++ -c -fmessage-length=0 -pipe -Wno-trigraphs -fasm-blocks -O3 -Wreturn-type -Wunused-variable -DKERNEL=1 -DKERNEL_PRIVATE=1 -gdwarf-2 -isysroot /Developer/SDKs/MacOSX10.6.sdk -mmacosx-version-min=10.6 -I/System/Library/Frameworks/Kernel.framework/Headers -fno-exceptions -fno-rtti -fpascal-strings -fno-schedule-insns -fno-schedule-insns2 -static -findirect-virtual-calls -mlong-branch' + branding_flags


driverCppFiles = Split("""
    AudioDevice
    AudioEngine
    AudioUserClient
    Songcast
    OpenHome/Fifo
""")


# build the songcast driver i386 binary

arch_flags  = '-arch i386 '
compile_cpp = 'gcc ' + arch_flags + cpp_flags + ' $SOURCE -o $TARGET'
compile_c   = 'gcc ' + arch_flags + c_flags + ' $SOURCE -o $TARGET'
compile_ac  = 'gcc ' + arch_flags + audio_clip_flags + ' $SOURCE -o $TARGET'
link        = 'g++ ' + arch_flags + link_flags1 + ' $SOURCES ' + link_flags2 + ' -o $TARGET'

objects_i386 = []
for f in driverCppFiles:
    objects_i386 += _default_env.Command('Driver/i386/' + f + '.o', '../../../OpenHome/MacOsX/Driver/' + f + '.cpp', compile_cpp)

objects_i386 += _default_env.Command('Driver/i386/AudioClip.o', '../../../OpenHome/MacOsX/Driver/AudioClip.cpp', compile_ac)
objects_i386 += _default_env.Command('Driver/i386/KextInfo.o', '../../../OpenHome/MacOsX/Driver/KextInfo.c', compile_c)

driver_i386 = _default_env.Command('Driver/i386/Songcast', objects_i386, link)


# build the songcast driver x86_64 binary

arch_flags  = '-arch x86_64 '
compile_cpp = 'gcc ' + arch_flags + cpp_flags + ' $SOURCE -o $TARGET'
compile_c   = 'gcc ' + arch_flags + c_flags + ' $SOURCE -o $TARGET'
compile_ac  = 'gcc ' + arch_flags + audio_clip_flags + ' $SOURCE -o $TARGET'
link        = 'g++ ' + arch_flags + link_flags1 + ' $SOURCES ' + link_flags2 + ' -o $TARGET'

objects_x86_64 = []
for f in driverCppFiles:
    objects_x86_64 += _default_env.Command('Driver/x86_64/' + f + '.o', '../../../OpenHome/MacOsX/Driver/' + f + '.cpp', compile_cpp)

objects_x86_64 += _default_env.Command('Driver/x86_64/AudioClip.o', '../../../OpenHome/MacOsX/Driver/AudioClip.cpp', compile_ac)
objects_x86_64 += _default_env.Command('Driver/x86_64/KextInfo.o', '../../../OpenHome/MacOsX/Driver/KextInfo.c', compile_c)

driver_x86_64 = _default_env.Command('Driver/x86_64/Songcast', objects_x86_64, link)


# build the songcast driver universal binary and bundle

driver_uni = _default_env.Command('Driver/Universal/Songcast', [driver_i386, driver_x86_64], 'lipo -create $SOURCES -output $TARGET')

driverFiles = [
]

driver = []
driver += _default_env.InstallAs('LinnSongcast.kext/Contents/MacOS/Songcast', driver_uni)
driver += _default_env.TagReplace('LinnSongcast.kext/Contents/Info.plist', 'InfoDriver.plist', TAGS=kBuildInfo)


# build the .pkg installer

dist = []
dist += _default_env.InstallAs('InstallerDist/Library/Linn/LinnSongcast.app', app)
dist += _default_env.Install('InstallerDist/Library/PreferencePanes/', prefs)
dist += _default_env.Install('InstallerDist/Library/Linn/', driverFolder)
dist += _default_env.InstallAs('InstallerDist/Library/LaunchAgents/uk.co.linn.songcast.plist', 'LaunchAgent.plist')

_default_env.Depends(dist, driver)

scripts = []
scripts += _default_env.Install('InstallerScripts/', 'Scripts/preinstall')
scripts += _default_env.Install('InstallerScripts/', 'Scripts/postinstall')

pkg = _default_env.ProductBuildWithResources('InstallerSongcast', distFolder,
                    PRODUCTNAME = 'Songcast',
                    SOURCEOPTIONNAME = '--root',
                    INSTALLDIR = '/',
                    IDENTIFIER = 'uk.co.linn.Songcast',
                    COMPONENTPLIST = _default_env.File('PkgInfo.plist'),
                    PKGCERT = '"Developer ID Installer: Linn Products Ltd"',
                    VERSION = kBuildInfo['BUILD_INFO_VERSION'],
                    INSTALLERRESOURCES = {'LICENSEFILE': _default_env.subst('$variant_dir/share/Linn/Core/license-cookies.txt')},
                    SCRIPTSDIR = scriptsFolder,
                    REQUIRERESTART = True)


_default_env.Depends(pkg, dist)
_default_env.Depends(pkg, scripts)


# build the .dmg for distribution - always add the .pkg as Installer.pkg so the auto updates work

dmgContents = []
dmgContents += _default_env.Install('InstallerDmgContents/', 'Scripts/uninstall.tool')
dmgContents += _default_env.InstallAs('InstallerDmgContents/Installer.pkg', pkg)

dmg = _default_env.MacOsXDmgBuild('InstallerSongcast', dmgContentsFolder, VOLNAME='"Linn Songcast"')

_default_env.Depends(dmg, dmgContents)


# install some stuff

instdmg = _default_env.Install('$install_dir/share/Songcast/', dmg)


# create the auto update dll

resources = [ (_default_env.subst('$install_dir/share/Songcast/InstallerSongcast.dmg'), 'InstallerSongcast.dmg') ]
updater = _default_env.CliLibrary('UpdaterSongcast_osx', 'Updater.cs', CLIRESOURCES=resources)
instdmg += _default_env.Install('$install_dir/share/Songcast', updater)


Alias('Lib', instdmg)


