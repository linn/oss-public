// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace KinskyTouch {
	
	
	// Base type probably should be MonoTouch.Foundation.NSObject or subclass
	[MonoTouch.Foundation.Register("AppDelegateIpad")]
	public partial class AppDelegateIpad {
		
		private MonoTouch.UIKit.UIWindow __mt_window;
		
		private UIViewControllerKinskyTouchIpad __mt_viewController;
		
		private MonoTouch.UIKit.UIButton __mt_buttonLeft;
		
		private MonoTouch.UIKit.UIButton __mt_buttonRight;
		
		private MonoTouch.UIKit.UIButton __mt_buttonCentre;
		
		private MonoTouch.UIKit.UIButton __mt_buttonShuffle;
		
		private MonoTouch.UIKit.UIButton __mt_buttonRepeat;
		
		private MonoTouch.UIKit.UINavigationController __mt_navigationController;
		
		private UIControlWheel __mt_controlRotaryVolume;
		
		private UIControlWheel __mt_controlRotaryTime;
		
		private MonoTouch.UIKit.UITableView __mt_tableViewSource;
		
		private MonoTouch.UIKit.UINavigationItem __mt_navigationItemSource;
		
		private MonoTouch.UIKit.UILabel __mt_labelRoom;
		
		private MonoTouch.UIKit.UILabel __mt_labelSource;
		
		private MonoTouch.UIKit.UIImageView __mt_imageViewArtwork;
		
		private MonoTouch.UIKit.UIImageView __mt_imageViewPlaylistAux;
		
		private HelperKinskyTouch __mt_helper;
		
		private SourceToolbarIpad __mt_sourceToolbar;
		
		private MonoTouch.UIKit.UIView __mt_viewBrowser;
		
		private ViewHourGlassIpad __mt_viewHourGlass;
		
		private UIViewInfoIpad __mt_viewInfo;
		
		private UIViewInfoIpad __mt_viewOverlayInfo;
		
		private MonoTouch.UIKit.UIControl __mt_controlTime;
		
		private MonoTouch.UIKit.UIControl __mt_controlVolume;
		
		private MonoTouch.UIKit.UIButton __mt_buttonViewInfo;
		
		#pragma warning disable 0169
		[MonoTouch.Foundation.Connect("window")]
		private MonoTouch.UIKit.UIWindow window {
			get {
				this.__mt_window = ((MonoTouch.UIKit.UIWindow)(this.GetNativeField("window")));
				return this.__mt_window;
			}
			set {
				this.__mt_window = value;
				this.SetNativeField("window", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("viewController")]
		private UIViewControllerKinskyTouchIpad viewController {
			get {
				this.__mt_viewController = ((UIViewControllerKinskyTouchIpad)(this.GetNativeField("viewController")));
				return this.__mt_viewController;
			}
			set {
				this.__mt_viewController = value;
				this.SetNativeField("viewController", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("buttonLeft")]
		private MonoTouch.UIKit.UIButton buttonLeft {
			get {
				this.__mt_buttonLeft = ((MonoTouch.UIKit.UIButton)(this.GetNativeField("buttonLeft")));
				return this.__mt_buttonLeft;
			}
			set {
				this.__mt_buttonLeft = value;
				this.SetNativeField("buttonLeft", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("buttonRight")]
		private MonoTouch.UIKit.UIButton buttonRight {
			get {
				this.__mt_buttonRight = ((MonoTouch.UIKit.UIButton)(this.GetNativeField("buttonRight")));
				return this.__mt_buttonRight;
			}
			set {
				this.__mt_buttonRight = value;
				this.SetNativeField("buttonRight", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("buttonCentre")]
		private MonoTouch.UIKit.UIButton buttonCentre {
			get {
				this.__mt_buttonCentre = ((MonoTouch.UIKit.UIButton)(this.GetNativeField("buttonCentre")));
				return this.__mt_buttonCentre;
			}
			set {
				this.__mt_buttonCentre = value;
				this.SetNativeField("buttonCentre", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("buttonShuffle")]
		private MonoTouch.UIKit.UIButton buttonShuffle {
			get {
				this.__mt_buttonShuffle = ((MonoTouch.UIKit.UIButton)(this.GetNativeField("buttonShuffle")));
				return this.__mt_buttonShuffle;
			}
			set {
				this.__mt_buttonShuffle = value;
				this.SetNativeField("buttonShuffle", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("buttonRepeat")]
		private MonoTouch.UIKit.UIButton buttonRepeat {
			get {
				this.__mt_buttonRepeat = ((MonoTouch.UIKit.UIButton)(this.GetNativeField("buttonRepeat")));
				return this.__mt_buttonRepeat;
			}
			set {
				this.__mt_buttonRepeat = value;
				this.SetNativeField("buttonRepeat", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("navigationController")]
		private MonoTouch.UIKit.UINavigationController navigationController {
			get {
				this.__mt_navigationController = ((MonoTouch.UIKit.UINavigationController)(this.GetNativeField("navigationController")));
				return this.__mt_navigationController;
			}
			set {
				this.__mt_navigationController = value;
				this.SetNativeField("navigationController", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("controlRotaryVolume")]
		private UIControlWheel controlRotaryVolume {
			get {
				this.__mt_controlRotaryVolume = ((UIControlWheel)(this.GetNativeField("controlRotaryVolume")));
				return this.__mt_controlRotaryVolume;
			}
			set {
				this.__mt_controlRotaryVolume = value;
				this.SetNativeField("controlRotaryVolume", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("controlRotaryTime")]
		private UIControlWheel controlRotaryTime {
			get {
				this.__mt_controlRotaryTime = ((UIControlWheel)(this.GetNativeField("controlRotaryTime")));
				return this.__mt_controlRotaryTime;
			}
			set {
				this.__mt_controlRotaryTime = value;
				this.SetNativeField("controlRotaryTime", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("tableViewSource")]
		private MonoTouch.UIKit.UITableView tableViewSource {
			get {
				this.__mt_tableViewSource = ((MonoTouch.UIKit.UITableView)(this.GetNativeField("tableViewSource")));
				return this.__mt_tableViewSource;
			}
			set {
				this.__mt_tableViewSource = value;
				this.SetNativeField("tableViewSource", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("navigationItemSource")]
		private MonoTouch.UIKit.UINavigationItem navigationItemSource {
			get {
				this.__mt_navigationItemSource = ((MonoTouch.UIKit.UINavigationItem)(this.GetNativeField("navigationItemSource")));
				return this.__mt_navigationItemSource;
			}
			set {
				this.__mt_navigationItemSource = value;
				this.SetNativeField("navigationItemSource", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("labelRoom")]
		private MonoTouch.UIKit.UILabel labelRoom {
			get {
				this.__mt_labelRoom = ((MonoTouch.UIKit.UILabel)(this.GetNativeField("labelRoom")));
				return this.__mt_labelRoom;
			}
			set {
				this.__mt_labelRoom = value;
				this.SetNativeField("labelRoom", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("labelSource")]
		private MonoTouch.UIKit.UILabel labelSource {
			get {
				this.__mt_labelSource = ((MonoTouch.UIKit.UILabel)(this.GetNativeField("labelSource")));
				return this.__mt_labelSource;
			}
			set {
				this.__mt_labelSource = value;
				this.SetNativeField("labelSource", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("imageViewArtwork")]
		private MonoTouch.UIKit.UIImageView imageViewArtwork {
			get {
				this.__mt_imageViewArtwork = ((MonoTouch.UIKit.UIImageView)(this.GetNativeField("imageViewArtwork")));
				return this.__mt_imageViewArtwork;
			}
			set {
				this.__mt_imageViewArtwork = value;
				this.SetNativeField("imageViewArtwork", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("imageViewPlaylistAux")]
		private MonoTouch.UIKit.UIImageView imageViewPlaylistAux {
			get {
				this.__mt_imageViewPlaylistAux = ((MonoTouch.UIKit.UIImageView)(this.GetNativeField("imageViewPlaylistAux")));
				return this.__mt_imageViewPlaylistAux;
			}
			set {
				this.__mt_imageViewPlaylistAux = value;
				this.SetNativeField("imageViewPlaylistAux", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("helper")]
		private HelperKinskyTouch helper {
			get {
				this.__mt_helper = ((HelperKinskyTouch)(this.GetNativeField("helper")));
				return this.__mt_helper;
			}
			set {
				this.__mt_helper = value;
				this.SetNativeField("helper", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("sourceToolbar")]
		private SourceToolbarIpad sourceToolbar {
			get {
				this.__mt_sourceToolbar = ((SourceToolbarIpad)(this.GetNativeField("sourceToolbar")));
				return this.__mt_sourceToolbar;
			}
			set {
				this.__mt_sourceToolbar = value;
				this.SetNativeField("sourceToolbar", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("viewBrowser")]
		private MonoTouch.UIKit.UIView viewBrowser {
			get {
				this.__mt_viewBrowser = ((MonoTouch.UIKit.UIView)(this.GetNativeField("viewBrowser")));
				return this.__mt_viewBrowser;
			}
			set {
				this.__mt_viewBrowser = value;
				this.SetNativeField("viewBrowser", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("viewHourGlass")]
		private ViewHourGlassIpad viewHourGlass {
			get {
				this.__mt_viewHourGlass = ((ViewHourGlassIpad)(this.GetNativeField("viewHourGlass")));
				return this.__mt_viewHourGlass;
			}
			set {
				this.__mt_viewHourGlass = value;
				this.SetNativeField("viewHourGlass", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("viewInfo")]
		private UIViewInfoIpad viewInfo {
			get {
				this.__mt_viewInfo = ((UIViewInfoIpad)(this.GetNativeField("viewInfo")));
				return this.__mt_viewInfo;
			}
			set {
				this.__mt_viewInfo = value;
				this.SetNativeField("viewInfo", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("viewOverlayInfo")]
		private UIViewInfoIpad viewOverlayInfo {
			get {
				this.__mt_viewOverlayInfo = ((UIViewInfoIpad)(this.GetNativeField("viewOverlayInfo")));
				return this.__mt_viewOverlayInfo;
			}
			set {
				this.__mt_viewOverlayInfo = value;
				this.SetNativeField("viewOverlayInfo", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("controlTime")]
		private MonoTouch.UIKit.UIControl controlTime {
			get {
				this.__mt_controlTime = ((MonoTouch.UIKit.UIControl)(this.GetNativeField("controlTime")));
				return this.__mt_controlTime;
			}
			set {
				this.__mt_controlTime = value;
				this.SetNativeField("controlTime", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("controlVolume")]
		private MonoTouch.UIKit.UIControl controlVolume {
			get {
				this.__mt_controlVolume = ((MonoTouch.UIKit.UIControl)(this.GetNativeField("controlVolume")));
				return this.__mt_controlVolume;
			}
			set {
				this.__mt_controlVolume = value;
				this.SetNativeField("controlVolume", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("buttonViewInfo")]
		private MonoTouch.UIKit.UIButton buttonViewInfo {
			get {
				this.__mt_buttonViewInfo = ((MonoTouch.UIKit.UIButton)(this.GetNativeField("buttonViewInfo")));
				return this.__mt_buttonViewInfo;
			}
			set {
				this.__mt_buttonViewInfo = value;
				this.SetNativeField("buttonViewInfo", value);
			}
		}
	}
	
	// Base type probably should be MonoTouch.UIKit.UIViewController or subclass
	[MonoTouch.Foundation.Register("UIViewControllerKinskyTouchIpad")]
	public partial class UIViewControllerKinskyTouchIpad {
		
		private MonoTouch.UIKit.UIView __mt_viewBrowserPlaylist;
		
		private MonoTouch.UIKit.UINavigationController __mt_navigationController;
		
		private MonoTouch.UIKit.UIView __mt_viewArtwork;
		
		private MonoTouch.UIKit.UIView __mt_viewInfo;
		
		private HelperKinskyTouch __mt_helper;
		
		private UIViewInfoIpad __mt_viewOverlay;
		
		#pragma warning disable 0169
		[MonoTouch.Foundation.Connect("viewBrowserPlaylist")]
		private MonoTouch.UIKit.UIView viewBrowserPlaylist {
			get {
				this.__mt_viewBrowserPlaylist = ((MonoTouch.UIKit.UIView)(this.GetNativeField("viewBrowserPlaylist")));
				return this.__mt_viewBrowserPlaylist;
			}
			set {
				this.__mt_viewBrowserPlaylist = value;
				this.SetNativeField("viewBrowserPlaylist", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("navigationController")]
		private MonoTouch.UIKit.UINavigationController navigationController {
			get {
				this.__mt_navigationController = ((MonoTouch.UIKit.UINavigationController)(this.GetNativeField("navigationController")));
				return this.__mt_navigationController;
			}
			set {
				this.__mt_navigationController = value;
				this.SetNativeField("navigationController", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("viewArtwork")]
		private MonoTouch.UIKit.UIView viewArtwork {
			get {
				this.__mt_viewArtwork = ((MonoTouch.UIKit.UIView)(this.GetNativeField("viewArtwork")));
				return this.__mt_viewArtwork;
			}
			set {
				this.__mt_viewArtwork = value;
				this.SetNativeField("viewArtwork", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("viewInfo")]
		private MonoTouch.UIKit.UIView viewInfo {
			get {
				this.__mt_viewInfo = ((MonoTouch.UIKit.UIView)(this.GetNativeField("viewInfo")));
				return this.__mt_viewInfo;
			}
			set {
				this.__mt_viewInfo = value;
				this.SetNativeField("viewInfo", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("helper")]
		private HelperKinskyTouch helper {
			get {
				this.__mt_helper = ((HelperKinskyTouch)(this.GetNativeField("helper")));
				return this.__mt_helper;
			}
			set {
				this.__mt_helper = value;
				this.SetNativeField("helper", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("viewOverlay")]
		private UIViewInfoIpad viewOverlay {
			get {
				this.__mt_viewOverlay = ((UIViewInfoIpad)(this.GetNativeField("viewOverlay")));
				return this.__mt_viewOverlay;
			}
			set {
				this.__mt_viewOverlay = value;
				this.SetNativeField("viewOverlay", value);
			}
		}
	}
	
	// Base type probably should be MonoTouch.UIKit.UIViewController or subclass
	[MonoTouch.Foundation.Register("ViewWidgetBrowserRootIpad")]
	public partial class ViewWidgetBrowserRootIpad {
		
		private MonoTouch.UIKit.UIView __mt_viewError;
		
		private MonoTouch.UIKit.UIButton __mt_buttonHome;
		
		private MonoTouch.UIKit.UIButton __mt_buttonRetry;
		
		#pragma warning disable 0169
		[MonoTouch.Foundation.Connect("viewError")]
		private MonoTouch.UIKit.UIView viewError {
			get {
				this.__mt_viewError = ((MonoTouch.UIKit.UIView)(this.GetNativeField("viewError")));
				return this.__mt_viewError;
			}
			set {
				this.__mt_viewError = value;
				this.SetNativeField("viewError", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("buttonHome")]
		private MonoTouch.UIKit.UIButton buttonHome {
			get {
				this.__mt_buttonHome = ((MonoTouch.UIKit.UIButton)(this.GetNativeField("buttonHome")));
				return this.__mt_buttonHome;
			}
			set {
				this.__mt_buttonHome = value;
				this.SetNativeField("buttonHome", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("buttonRetry")]
		private MonoTouch.UIKit.UIButton buttonRetry {
			get {
				this.__mt_buttonRetry = ((MonoTouch.UIKit.UIButton)(this.GetNativeField("buttonRetry")));
				return this.__mt_buttonRetry;
			}
			set {
				this.__mt_buttonRetry = value;
				this.SetNativeField("buttonRetry", value);
			}
		}
	}
	
	// Base type probably should be MonoTouch.UIKit.UIToolbar or subclass
	[MonoTouch.Foundation.Register("SourceToolbarIpad")]
	public partial class SourceToolbarIpad {
		
		private MonoTouch.UIKit.UIButton __mt_buttonRepeat;
		
		private MonoTouch.UIKit.UIButton __mt_buttonShuffle;
		
		#pragma warning disable 0169
		[MonoTouch.Foundation.Connect("buttonRepeat")]
		private MonoTouch.UIKit.UIButton buttonRepeat {
			get {
				this.__mt_buttonRepeat = ((MonoTouch.UIKit.UIButton)(this.GetNativeField("buttonRepeat")));
				return this.__mt_buttonRepeat;
			}
			set {
				this.__mt_buttonRepeat = value;
				this.SetNativeField("buttonRepeat", value);
			}
		}
		
		[MonoTouch.Foundation.Connect("buttonShuffle")]
		private MonoTouch.UIKit.UIButton buttonShuffle {
			get {
				this.__mt_buttonShuffle = ((MonoTouch.UIKit.UIButton)(this.GetNativeField("buttonShuffle")));
				return this.__mt_buttonShuffle;
			}
			set {
				this.__mt_buttonShuffle = value;
				this.SetNativeField("buttonShuffle", value);
			}
		}
	}
	
	// Base type probably should be MonoTouch.UIKit.UIView or subclass
	[MonoTouch.Foundation.Register("UIViewInfoIpad")]
	public partial class UIViewInfoIpad {
	}
	
	// Base type probably should be MonoTouch.UIKit.UIView or subclass
	[MonoTouch.Foundation.Register("ViewHourGlassIpad")]
	public partial class ViewHourGlassIpad {
	}
}
