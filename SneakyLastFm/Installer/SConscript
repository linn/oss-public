import os, shutil, sys
Import('_default_env')

svn_version = os.popen('svnversion %s' % _default_env.GetLaunchDir()).read()[:-1]
svn_version = svn_version.split(':')[-1]
if svn_version == "exported":
    svn_version = "0"

# Here's the core info for the package
DEBNAME = "SneakyLastFm"
DEBVERSION = "1.1.0"
DEBMAINT = "David Drysdale-Wilson [davidd@oss.linn.co.uk]"
DEBARCH = "all"
DEBDEPENDS = "libmono-winforms2.0-cil" # what are we dependent on?
DEBDESC = "UPnP Last.Fm client"

DEBFILES = [

    # Now we specify the files to be included in the .deb
    # Where they should go, and where they should be copied from.
    # If you have a lot of files, you may wish to generate this 
    # list in some other way.
    ("usr/bin/SneakyLastFm", "$install_dir/bin/SneakyLastFm"),
    ("usr/lib/SneakyLastFm/SneakyLastFm.exe", "$install_dir/bin/SneakyLastFm.exe"),
    ("usr/lib/SneakyLastFm/OssTopology.dll", "$install_dir/bin/OssTopology.dll"),
    ("usr/lib/SneakyLastFm/OssServices.dll", "$install_dir/bin/OssServices.dll"),
    ("usr/lib/SneakyLastFm/OssControl.dll", "$install_dir/bin/OssControl.dll"),
    ("usr/lib/SneakyLastFm/OssCore.dll", "$install_dir/bin/OssCore.dll"),
]

DEBCONTROLFILE = "DEBIAN/control"

debpkg = _default_env.subst('$install_dir/share/SneakyLastFm/%s_%s-%s_%s.deb' % (DEBNAME, DEBVERSION, svn_version, DEBARCH))

# This copies the necessary files into place.
# Fortunately, SCons creates the necessary directories for us.
for f in DEBFILES:
    # We put things in a directory named after the package
    dest = f[0]
    # The .deb package will depend on this file
    _default_env.Depends(debpkg, dest)
    # Copy from the the source tree.
    _default_env.Command(dest, f[1], Copy('$TARGET','$SOURCE'))
    # The control file also depends on each source because we'd like
    # to know the total installed size of the package
    _default_env.Depends(DEBCONTROLFILE, dest)

# Now to create the control file:
CONTROL_TEMPLATE = """
Package: %s
Priority: extra
Section: misc
Installed-Size: %s
Maintainer: %s
Architecture: %s
Version: %s-%s
Depends: %s
Description: %s

"""
_default_env.Depends(debpkg, DEBCONTROLFILE)

# The control file should be updated when the SVN version changes
_default_env.Depends(DEBCONTROLFILE, _default_env.Value(svn_version))

# This function creates the control file from the template and info
# specified above, and works out the final size of the package.
def make_control(target=None, source=None, env=None):
    installed_size = 0
    for i in DEBFILES:
        installed_size += os.stat(str(env.File(i[1])))[6]
    control_info = CONTROL_TEMPLATE % (
        DEBNAME, installed_size, DEBMAINT, DEBARCH, DEBVERSION,
        svn_version, DEBDEPENDS, DEBDESC)
    f = open(str(target[0]), 'w')
    f.write(control_info)
    f.close()
    
# We can generate the control file by calling make_control
ctrl_file = _default_env.Command(DEBCONTROLFILE, None, make_control)

# And we can generate the .deb file by calling dpkg-deb
debpkg = _default_env.Command(debpkg, DEBCONTROLFILE, "dpkg-deb -b %s %s" % (_default_env.subst("$build_dir/Installer"), "$TARGET"))

Alias('Lib', debpkg)



BUNDLEIDENTIFIER = "SneakyLastFm"
BUNDLEEXE = "SneakyLastFm"
BUNDLEICON = "LastFm.ico"
BUNDLEDESC = "UPnP Last.Fm client"
BUNDLEVERSION = "1.1.0"

MACFILES = [
    # Now we specify the files to be included in the .deb
    # Where they should go, and where they should be copied from.
    # If you have a lot of files, you may wish to generate this 
    # list in some other way.
    ("%s.app/Contents/MacOS/SneakyLastFm" % BUNDLEIDENTIFIER, "SneakyLastFm.txt"),
    ("%s.app/Contents/Resources/SneakyLastFm.exe" % BUNDLEIDENTIFIER, "$install_dir/bin/SneakyLastFm.exe"),
    ("%s.app/Contents/Resources/OssTopology.dll" % BUNDLEIDENTIFIER, "$install_dir/bin/OssTopology.dll"),
    ("%s.app/Contents/Resources/OssServices.dll" % BUNDLEIDENTIFIER, "$install_dir/bin/OssServices.dll"),
    ("%s.app/Contents/Resources/OssControl.dll" % BUNDLEIDENTIFIER, "$install_dir/bin/OssControl.dll"),
    ("%s.app/Contents/Resources/OssCore.dll" % BUNDLEIDENTIFIER, "$install_dir/bin/OssCore.dll"),
    ("%s.app/Contents/Resources/LastFm.ico" % BUNDLEIDENTIFIER, "$variant_dir/share/SneakyLastFm/LastFm.ico"),
]

INFO_TEMPLATE = """
<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">
<plist version=\"1.0\">
<dict>
    <key>CFBundleGetInfoString</key>
    <string>%s</string>
    <key>CFBundleIdentifier</key>
    <string>%s</string>
    <key>CFBundleExecutable</key>
    <string>%s</string>
    <key>CFBundleIconFile</key>
    <string>%s</string>
    <key>CFBundleVersion</key>
    <string>%s</string>
</dict>
</plist>
"""

INFOFILE = "%s.app/Contents/Info.plist" % BUNDLEIDENTIFIER

macpkg = _default_env.subst('$install_dir/share/SneakyLastFm/%s.dmg' % BUNDLEIDENTIFIER)

# This copies the necessary files into place.
# Fortunately, SCons creates the necessary directories for us.
for f in MACFILES:
    # We put things in a directory named after the package
    dest = f[0]
    # The .dmg package will depend on this file
    _default_env.Depends(macpkg, dest)
    # Copy from the the source tree.
    _default_env.Command(dest, f[1], Copy('$TARGET','$SOURCE'))
    # The control file also depends on each source because we'd like
    # to know the total installed size of the package
    _default_env.Depends(INFOFILE, dest)
    
_default_env.Depends(macpkg, INFOFILE)

def make_control(target=None, source=None, env=None):
    controlInfo = INFO_TEMPLATE % (BUNDLEDESC, BUNDLEIDENTIFIER, BUNDLEEXE, BUNDLEICON, BUNDLEVERSION)
    f = open(str(target[0]), 'w')
    f.write(controlInfo)
    f.close()
    
infoFile = _default_env.Command(INFOFILE, None, make_control)

Alias('Lib', infoFile)
