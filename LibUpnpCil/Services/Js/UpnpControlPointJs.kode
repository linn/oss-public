//
// Use the reference section to name additional assemblies
// required to execute the template.
//
// The following assemblies are provided by default:
//		System.dll
//		System.Xml.dll
//		LinnGen.exe
//
// Name one additional assembly on each line of the reference section
//

<* reference *>

XmlUpnp.dll

<* reference *>

//
// Use the import section for additional using directives.
//
// The following directives are provided by default
//
//		using System;
//		using System.Text;
//		using System.IO;
//		using System.Xml;
//		using System.Xml.XPath;
//		using System.Collections.Generic;
//

<* import *>

using Linn.Xml.Upnp;

<* import *>

//
// Use the function section to provide helper functions
// that can be called from within the body section
//

<* function *>

Dictionary<string,string> argtype = new Dictionary<string,string>();
Dictionary<string,string> svtype = new Dictionary<string,string>();

void Initialise()
{    
    argtype.Add("string", "String");
    argtype.Add("ui1", "int");
    argtype.Add("ui2", "int");
    argtype.Add("ui4", "int");
    argtype.Add("boolean", "boolean");
    argtype.Add("i1", "int");
    argtype.Add("i2", "int");
    argtype.Add("i4", "int");
    argtype.Add("bin.base64", "String");
    argtype.Add("uri", "String");
    
    svtype.Add("string", "String");
    svtype.Add("ui1", "Int");
    svtype.Add("ui2", "Int");
    svtype.Add("ui4", "Int");
    svtype.Add("boolean", "Bool");
    svtype.Add("i1", "Int");
    svtype.Add("i2", "Int");
    svtype.Add("i4", "Int");
    svtype.Add("bin.base64", "Binary");
    svtype.Add("uri", "String");
}

string FormatValue(string aValue)
{
    string result = "";
    
    bool uppercase = true;
    bool uppertrigger = false;
    
    for (int i = 0; i < aValue.Length; i++)
    {
        char x = aValue[i];
        
        if (x >= 'A' && x <= 'Z')
        {
        	if (uppercase || uppertrigger)
        	{
            	result += x;
            	uppercase = false;
            	uppertrigger = false;
            }
            else
            {
            	result += Char.ToLower(x);
            }
            
            continue;
        }
        
        if (x >= 'a' && x <= 'z')
        {
        	if (uppercase)
        	{
            	result += Char.ToUpper(x);
            	uppercase = false;
            }
            else
            {
            	result += x;
            	
	            uppertrigger = true;
            }
            
            continue;
        }
        
      	uppercase = true;
      	
        if (x >= '0' && x <= '9')
        {
            result += x;
            continue;
        }
        
        if (x == '+')
        {
        	result += "Plus";
        	continue;
        }
        
        if (x == '&')
        {
        	result += "And";
        	continue;
        }
        
        if (x == '#')
        {
        	result += "Hash";
        	continue;
        }
        
        if (x == '$')
        {
        	result += "Dollar";
        	continue;
        }
        
        if (x == '*')
        {
        	result += "Star";
        	continue;
        }
    }
    
    return (result);
}

string InString(Method a)
{
    string result = "";
    
    foreach (Argument i in a.inargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        
        result += i.name;
    }
    
    return(result);
}

string ArgString(Method a)
{
    string result = InString(a);
    
    if (result.Length > 0)
    {
        result += ", ";
    }
    
    result += "aSuccessFunction, aErrorFunction";
    
    return(result);
}

<* function *>

//
// The body section contains the generated text
//
// C# code can be embedded within <% %> tags
//
// <%=name%> will output the contents of the named variable
//
// args is an array of strings containing the generator arguments
//
// XPathNavigator LoadXmlFile(filename) is provided for loading
// and navigating xml files
//
<* body *>
<%
    if (args.Length < 1)
    {
        throw (new TemplateException("Xml file not specified"));
    }
    
    if (args.Length < 2)
    {
        throw (new TemplateException("Service Domain not specified"));
    }
    
    if (args.Length < 3)
    {
        throw (new TemplateException("Service Type not specified"));
    }
    
    if (args.Length < 4)
    {
        throw (new TemplateException("Service Version not specified"));
    }
    
	string domain = args[1];
    string type = args[2];
    uint version;
    
    try
    {
	   version = Convert.ToUInt32(args[3]);
	}
	catch (FormatException)
	{
        throw (new TemplateException("Invalid version number specified"));
	}
    catch (OverflowException)
    {
        throw (new TemplateException("Invalid version number specified"));
    }

    string upnpdomain = domain.Replace(".", "-");

    if (upnpdomain.StartsWith("upnp-"))
    {
        upnpdomain = "schemas-" + upnpdomain;
    }

    Initialise();

	UpnpXml u = new UpnpXml(args[0]);
%>

var Service<%=type%> = function(aId){	
	this.iUrl = window.location.protocol + "//" + window.location.host + "/" + aId + "/<%=type%>/control";
	this.iDomain = "<%=domain%>";
	if (this.iDomain == "upnp.org") {
		this.iDomain = "schemas.upnp.org";
    }
	this.iDomain = this.iDomain.replace(/\./,"-");
	this.iType = "<%=type%>";
	this.iVersion = "<%=version.ToString()%>";
	
	this.iVariables = {};
	<%  foreach (Variable s in u.variables) %>
<%  { %>
		this.iVariables["<%=s.prettyname%>"] = new ServiceVariable("<%=s.prettyname%>");
<%  } %>
}

<%  foreach (Variable s in u.variables) %>
<%  { %>
<%      foreach (string v in s.values) %>
<%      { %>
Service<%=type%>.k<%=s.prettyname%><%=FormatValue(v)%> = "<%=v%>";
<%      } %>
<%  } %>

Service<%=type%>.prototype.ServiceName = function(){
	return this.iType;
}

Service<%=type%>.prototype.Variables = function(){
	return this.iVariables;
}

Service<%=type%>.prototype.VariableNames = function(){
	var result = [];
	for (var variable in this.iVariables){
		if (this.iVariables.hasOwnProperty(variable)){
			result[result.length] = variable;
		}
	}
	return result;
}

<%  foreach (Method a in u.methods) %>
<%  { %>

Service<%=type%>.prototype.<%=a.name%> = function(<%=ArgString(a)%>){	
	var request = new SoapRequest("<%=a.name%>", this.iUrl, this.iDomain, this.iType, this.iVersion);		
<%      foreach (Argument i in a.inargs) %>
<%      { %>
    request.Write<%=svtype[i.variable.type]%>Parameter("<%=i.name%>", <%=i.name%>);
<%      } %>
    request.Send(function(result){
<%          foreach (Argument o in a.outargs) %>
<%          { %>
		result["<%=o.name%>"] = request.Read<%=svtype[o.variable.type]%>Parameter(result["<%=o.name%>"]);	
<%          } %>	
		if (aSuccessFunction){
			aSuccessFunction(result);
		}
	}, function(message, transport) {
		if (aErrorFunction) {aErrorFunction(message, transport);}
	});
}
    
<%  } %>

<* body *>
