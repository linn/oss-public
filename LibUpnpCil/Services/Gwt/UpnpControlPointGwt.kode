//
// Use the reference section to name additional assemblies
// required to execute the template.
//
// The following assemblies are provided by default:
//		System.dll
//		System.Xml.dll
//		LinnGen.exe
//
// Name one additional assembly on each line of the reference section
//

<* reference *>

XmlUpnp.dll

<* reference *>

//
// Use the import section for additional using directives.
//
// The following directives are provided by default
//
//		using System;
//		using System.Text;
//		using System.IO;
//		using System.Xml;
//		using System.Xml.XPath;
//		using System.Collections.Generic;
//

<* import *>

using Linn.Xml.Upnp;

<* import *>

//
// Use the function section to provide helper functions
// that can be called from within the body section
//

<* function *>

Dictionary<string,string> argtype = new Dictionary<string,string>();
Dictionary<string,string> svtype = new Dictionary<string,string>();

void Initialise()
{    
    argtype.Add("string", "String");
    argtype.Add("ui1", "int");
    argtype.Add("ui2", "int");
    argtype.Add("ui4", "int");
    argtype.Add("boolean", "boolean");
    argtype.Add("i1", "int");
    argtype.Add("i2", "int");
    argtype.Add("i4", "int");
    argtype.Add("bin.base64", "String");
    argtype.Add("uri", "String");
    
    svtype.Add("string", "String");
    svtype.Add("ui1", "Int");
    svtype.Add("ui2", "Int");
    svtype.Add("ui4", "Int");
    svtype.Add("boolean", "Bool");
    svtype.Add("i1", "Int");
    svtype.Add("i2", "Int");
    svtype.Add("i4", "Int");
    svtype.Add("bin.base64", "Binary");
    svtype.Add("uri", "String");
}

string FormatValue(string aValue)
{
    string result = "";
    
    bool uppercase = true;
    bool uppertrigger = false;
    
    for (int i = 0; i < aValue.Length; i++)
    {
        char x = aValue[i];
        
        if (x >= 'A' && x <= 'Z')
        {
        	if (uppercase || uppertrigger)
        	{
            	result += x;
            	uppercase = false;
            	uppertrigger = false;
            }
            else
            {
            	result += Char.ToLower(x);
            }
            
            continue;
        }
        
        if (x >= 'a' && x <= 'z')
        {
        	if (uppercase)
        	{
            	result += Char.ToUpper(x);
            	uppercase = false;
            }
            else
            {
            	result += x;
            	
	            uppertrigger = true;
            }
            
            continue;
        }
        
      	uppercase = true;
      	
        if (x >= '0' && x <= '9')
        {
            result += x;
            continue;
        }
        
        if (x == '+')
        {
        	result += "Plus";
        	continue;
        }
        
        if (x == '&')
        {
        	result += "And";
        	continue;
        }
        
        if (x == '#')
        {
        	result += "Hash";
        	continue;
        }
        
        if (x == '$')
        {
        	result += "Dollar";
        	continue;
        }
        
        if (x == '*')
        {
        	result += "Star";
        	continue;
        }
    }
    
    return (result);
}

string InString(Method a)
{
    string result = "";
    
    foreach (Argument i in a.inargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        
        result += argtype[i.variable.type];
        result += " ";
        result += i.name;
    }
    
    return(result);
}

string ArgString(Method a)
{
    string result = InString(a);
    
    if (result.Length > 0)
    {
        result += ", ";
    }
    
    result += "final AsyncCallback aCallback";
    
    return(result);
}

<* function *>

//
// The body section contains the generated text
//
// C# code can be embedded within <% %> tags
//
// <%=name%> will output the contents of the named variable
//
// args is an array of strings containing the generator arguments
//
// XPathNavigator LoadXmlFile(filename) is provided for loading
// and navigating xml files
//
<* body *>
<%
    if (args.Length < 1)
    {
        throw (new TemplateException("Xml file not specified"));
    }
    
    if (args.Length < 2)
    {
        throw (new TemplateException("Service Domain not specified"));
    }
    
    if (args.Length < 3)
    {
        throw (new TemplateException("Service Type not specified"));
    }
    
    if (args.Length < 4)
    {
        throw (new TemplateException("Service Version not specified"));
    }
    
	string domain = args[1];
    string type = args[2];
    uint version;
    
    try
    {
	   version = Convert.ToUInt32(args[3]);
	}
	catch (FormatException)
	{
        throw (new TemplateException("Invalid version number specified"));
	}
    catch (OverflowException)
    {
        throw (new TemplateException("Invalid version number specified"));
    }

    string upnpdomain = domain.Replace(".", "-");

    if (upnpdomain.StartsWith("upnp-"))
    {
        upnpdomain = "schemas-" + upnpdomain;
    }

    Initialise();

	UpnpXml u = new UpnpXml(args[0]);
%>
package uk.co.linn.gwt.services.client;

import com.google.gwt.user.client.rpc.AsyncCallback;

public class Service<%=type%> extends Service {

<%  foreach (Variable s in u.variables) %>
<%  { %>
<%      foreach (string v in s.values) %>
<%      { %>
    public static final String k<%=s.prettyname%><%=FormatValue(v)%> = "<%=v%>";
<%      } %>
<%  } %>

    public Service<%=type%>(String aId) {
        super("<%=domain%>", "<%=type%>", <%=version.ToString()%>, aId);
    }
        
<%  foreach (Method a in u.methods) %>
<%  { %>
    public class <%=a.name%>Response {
<%      foreach (Argument o in a.outargs) %>
<%      { %>
        public <%=argtype[o.variable.type]%> <%=o.name%>;
<%      } %>
    }

<%  } %>
<%  foreach (Method a in u.methods) %>
<%  { %>
    public void <%=a.name%>(<%=ArgString(a)%>) {
        WriteEnvelope envelope = new WriteEnvelope("<%=a.name%>");
<%      foreach (Argument i in a.inargs) %>
<%      { %>
        envelope.Write<%=svtype[i.variable.type]%>("<%=i.name%>", <%=i.name%>);
<%      } %>
        envelope.Send(new AsyncCallback() {
            public void onSuccess(Object result) {
                <%=a.name%>Response response = new <%=a.name%>Response();
<%      if (a.outargs.Count > 0) %>
<%      { %>
                ReadEnvelope envelope = (ReadEnvelope)result;
<%          foreach (Argument o in a.outargs) %>
<%          { %>
                response.<%=o.name%> = envelope.Read<%=svtype[o.variable.type]%>("<%=o.name%>");
<%          } %>
<%      } %>
                aCallback.onSuccess(response);
            }
            public void onFailure(Throwable caught) {
                aCallback.onFailure(caught);
            }
        });
    }
    
<%  } %>
}

<* body *>
