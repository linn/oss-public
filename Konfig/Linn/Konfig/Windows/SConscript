Import('_default_env kBuildInfo appAssemblyInfo')

# install installer resources

files = Split("""
    ../Resources/Icon.ico
    Installer/finish.bmp
    Installer/header.bmp
    Installer/NsiTemplate.txt
""")
installerResources = _default_env.Install('$variant_dir/share/Linn/Konfig', files)

# install resources

instRes  = _default_env.RecursiveInstall('$install_dir/bin/Konfig/presentation', _default_env.Dir('../Resources/presentation').srcnode())
instRes += _default_env.RecursiveInstall('$install_dir/bin/Konfig/presentation/Widgets/Common', '$hardware_dir/share/Linn/Resources/Widgets/Common')
instRes += _default_env.RecursiveInstall('$install_dir/bin/Konfig/presentation/Widgets/Fonts', '$hardware_dir/share/Linn/Resources/Widgets/Fonts')

# build the preferences app

linnLibs = Split("""
    XmlLayout
    XmlRom
    XmlRomCollection
    XmlTags
    OssCore
    OssSysLib
    OssControl
    OssServices
    OssDidlLite
    OssTopology
    OssToolkitWpf
    OssProductSupport
    OssKinsky
""")

sysLibs = Split("""
    PresentationCore
    PresentationFramework
    System
    System.Drawing
    System.Xml
    System.Xaml
    WindowsBase
""")

otherLibs = Split("""
    ICSharpCode.SharpZipLib
    taglib-sharp
    ohXapp
    ohXappViewer
    ohXen
    ohNet.net
    CpLinnCoUkDiagnostics1.net
    CpLinnCoUkVolkano1.net
    CpAvOpenhomeOrgProduct1.net
""")

libs = linnLibs + sysLibs + otherLibs

files = Split("""
    Properties/Resources.resx
    Properties/Resources.Designer.cs
    App.xaml
    App.xaml.cs
    MainWindow.xaml
    MainWindow.xaml.cs
    ResourceManager.cs
    ../CpDeviceAdvancedList.cs
    ../CpDeviceDiagnosticsList.cs
    ../CpDeviceDiagnosticsReportList.cs
    ../CpDeviceFacDefList.cs
    ../CpDeviceRecogniserList.cs
    ../CpDeviceReprogramList.cs
    ../CpDeviceUpdateList.cs
    ../FirmwareCache.cs
    ../FlashSupport.cs
    ../Model.cs
    ../Preferences.cs
    ../SettingsPageAdvanced.cs
    ../VersionInfoReader.cs
    ../XappController.cs
    ../XappView.cs
""")

target = 'WinExe'
if _default_env['variant'] == 'debug' or _default_env['variant'] == 'trace':
    target = 'Exe'

msproj = _default_env.MSBuildFileGenerator('Konfig', files + appAssemblyInfo,
										   OUTPUTTYPE=target,
                                           CLILIBS=libs,
                                           CLIPLATFORMTARGET='x86',
                                           LINKS=files + appAssemblyInfo,
                                           ICON=_default_env.subst('$variant_dir/share/Linn/Konfig/Icon.ico'),
										   ROOTNAMESPACE='Linn.Konfig',
                                           APPLICATIONDEFINITION='App',
                                           TOOLSVERSION='4.0',
                                           TARGETFRAMEWORKVERSION='4.0')
Depends(msproj, instRes + installerResources)
Depends(msproj, Alias('OpenHomeLib'))

app = _default_env.MSBuildExeBuilder('Konfig', msproj, CLILIBS=libs)
app = _default_env.Install('$install_dir/bin/Konfig', app)
app.append(File(_default_env.subst('$install_dir/bin/Reprog.exe')))
app.append(File(_default_env.subst('$install_dir/bin/FacDef.exe')))

instLibs  = [File(_default_env.subst('$install_dir/lib/Linn/' + f + '.dll')) for f in linnLibs]
instLibs += [File(_default_env.subst('$install_dir/lib/' + f + '.dll')) for f in otherLibs]
instLibs += [File(_default_env.subst('$install_dir/lib/ohNet.dll'))]

# build the installer

if _default_env['installers']:
    installer = _default_env.ReleaseInstallerWin32('$install_dir/share/Konfig', 'InstallerKonfig',
                                                    FILES        = {''        : app + instLibs + [ _default_env.Dir('$install_dir/bin/Konfig/presentation') ] }, 
                                                    TEMPLATE     = _default_env.subst('$variant_dir/share/Linn/Konfig/NsiTemplate.txt'),
                                                    RESOURCES    = {'icon'    : _default_env.subst('$variant_dir/share/Linn/Konfig/Icon.ico'),
                                                                    'header'  : _default_env.subst('$variant_dir/share/Linn/Konfig/header.bmp'),
                                                                    'finish'  : _default_env.subst('$variant_dir/share/Linn/Konfig/finish.bmp'),
                                                                    'license' : _default_env.subst('$variant_dir/share/Linn/Core/license-cookies.txt')},
                                                    PRODUCT      = 'Konfig',
                                                    VERSION      = kBuildInfo['BUILD_INFO_VERSION'],
                                                    CERT         = '',
                                                    LAUNCHFILE   = 'Konfig.exe')

    Alias('Lib', installer)
Alias('Lib', installerResources)

resources = [ (_default_env.subst('$install_dir/share/Konfig/InstallerKonfig.exe'), 'InstallerKonfig.exe') ]
updater = _default_env.CliLibrary('UpdaterKonfig_win', 'Installer/Updater.cs', CLIRESOURCES=resources)
installed = _default_env.Install('$install_dir/share/Konfig', updater)
Alias('Lib', installed)

