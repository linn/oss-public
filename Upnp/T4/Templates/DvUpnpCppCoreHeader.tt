<#@ include file="UpnpServiceXml.tt" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Linn.Xml.UpnpServiceXml" #>
<#@ template language="C#" #>
<#
    string domain = TemplateArgument("domain");
    string type = TemplateArgument("type");

    uint version = 1;

    try
    {
	   version = Convert.ToUInt32(TemplateArgument("version"));
	}
	catch (FormatException)
	{
        throw (new ArgumentException("Invalid version number specified"));
	}
    catch (OverflowException)
    {
        throw (new ArgumentException("Invalid version number specified"));
    }

    string fileName = "";
    char[] charSeparators = new char[] {'.'};
    string[] res = domain.Split(charSeparators, StringSplitOptions.None);
    foreach (string str in res)
    {
        fileName += str.Substring(0, 1).ToUpper();
        if (str.Length > 1)
        {
            fileName += str.Substring(1, str.Length-1);
        }
    }
    fileName += type;
    fileName += version;
    string className = "DvService" + fileName;

    Initialise();

	Document u = new Document(TemplateArgument("xml"));
#>
#ifndef HEADER_DV<#=fileName.ToUpper()#>
#define HEADER_DV<#=fileName.ToUpper()#>

#include <ZappTypes.h>
#include <Buffer.h>
#include <Core/DvDevice.h>
#include <DvService.h>

namespace Zapp {

class PropertyInt;
class PropertyUint;
class PropertyBool;
class PropertyString;
class PropertyBinary;

/**
 * Base Device for <#=domain#>:<#=type#>:<#=version#>
 */
class <#=className#> : public DvService
{
public:
    virtual ~<#=className#>() {}
<#  foreach (Variable s in u.evented) #>
<#  { #>
    void SetProperty<#=s.name#>(<#=inArgType[s.type]#> aValue);
    void GetProperty<#=s.name#>(<#=outArgTypeProperty[s.type]#> aValue);
<#  } #>
protected:
    <#=className#>(DvDevice& aDevice);
<#  foreach (Method a in u.methods) #>
<#  { #>
    void EnableAction<#=a.name#>();
<#  } #>
private:
<#  foreach (Method a in u.methods) #>
<#  { #>
    virtual void <#=a.name#>(IInvocationResponse& aResponse, TUint aVersion<#=ActionArgs(a)#>);
<#  } #>
private:
    <#=className#>();
<#  foreach (Method a in u.methods) #>
<#  { #>
    void Do<#=a.name#>(IDvInvocation& aInvocation, TUint aVersion);
<#  } #>
private:
<#  foreach (Variable s in u.evented) #>
<#  { #>
    <#=propertyType[s.type]#>* iProperty<#=s.name#>;
<#  } #>
};

} // namespace Zapp

#endif // HEADER_DV<#=fileName.ToUpper()#>

<#+
Dictionary<string,string> inArgType = new Dictionary<string,string>();
Dictionary<string,string> outArgTypeAction = new Dictionary<string,string>();
Dictionary<string,string> outArgTypeProperty = new Dictionary<string,string>();
Dictionary<string,string> propertyType = new Dictionary<string,string>();

void Initialise()
{
    inArgType.Add("ui1", "TUint");
    inArgType.Add("ui2", "TUint");
    inArgType.Add("ui4", "TUint");
    inArgType.Add("boolean", "TBool");
    inArgType.Add("i1", "TInt");
    inArgType.Add("i2", "TInt");
    inArgType.Add("i4", "TInt");
    inArgType.Add("string", "const Brx&");
    inArgType.Add("bin.base64", "const Brx&");
    inArgType.Add("uri", "const Brx&");

    outArgTypeAction.Add("ui1", "IInvocationResponseUint&");
    outArgTypeAction.Add("ui2", "IInvocationResponseUint&");
    outArgTypeAction.Add("ui4", "IInvocationResponseUint&");
    outArgTypeAction.Add("boolean", "IInvocationResponseBool&");
    outArgTypeAction.Add("i1", "IInvocationResponseInt&");
    outArgTypeAction.Add("i2", "IInvocationResponseInt&");
    outArgTypeAction.Add("i4", "IInvocationResponseInt&");
    outArgTypeAction.Add("string", "IInvocationResponseString&");
    outArgTypeAction.Add("bin.base64", "IInvocationResponseBinary&");
    outArgTypeAction.Add("uri", "IInvocationResponseString&");

    outArgTypeProperty.Add("ui1", "TUint&");
    outArgTypeProperty.Add("ui2", "TUint&");
    outArgTypeProperty.Add("ui4", "TUint&");
    outArgTypeProperty.Add("boolean", "TBool&");
    outArgTypeProperty.Add("i1", "TInt&");
    outArgTypeProperty.Add("i2", "TInt&");
    outArgTypeProperty.Add("i4", "TInt&");
    outArgTypeProperty.Add("string", "Brhz&");
    outArgTypeProperty.Add("bin.base64", "Brh&");
    outArgTypeProperty.Add("uri", "Brhz&");

    propertyType.Add("ui1", "PropertyUint");
    propertyType.Add("ui2", "PropertyUint");
    propertyType.Add("ui4", "PropertyUint");
    propertyType.Add("boolean", "PropertyBool");
    propertyType.Add("i1", "PropertyInt");
    propertyType.Add("i2", "PropertyInt");
    propertyType.Add("i4", "PropertyInt");
    propertyType.Add("string", "PropertyString");
    propertyType.Add("bin.base64", "PropertyBinary");
    propertyType.Add("uri", "PropertyString");
}

string ActionArgs(Method a)
{
    string result = "";
    foreach (Argument i in a.inargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        result += inArgType[i.variable.type];
        result += " ";
        result += "a" + i.name;
    }
    foreach (Argument o in a.outargs)
    {
        if (result.Length > 0)
        {
            result += ", ";
        }
        result += outArgTypeAction[o.variable.type];
        result += " ";
        result += "a" + o.name;
    }
    if (result.Length > 0)
    {
        result = ", " + result;
    }
    return result;
}

string TemplateArgument(string aName)
{
	string[] args =  System.Environment.GetCommandLineArgs();
		
	bool isarg = false;
	
	foreach (string arg in args)
	{
		if (isarg)
		{
			string[] parts = arg.Split(new char[] {':'});
			
			if (parts.Length == 2)
			{
				if (parts[0] == aName)
				{
					return (parts[1]);
				}
			}
			
			isarg = false;
			continue;
		}
		
		if (arg == "-a")
		{
			isarg = true;
		}
	}
	
	throw (new ArgumentException(aName + " not specified"));
}
#>
